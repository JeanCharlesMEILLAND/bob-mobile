// Assigner les utilisateurs aux groupes selon leurs profils
const axios = require('axios');

const STRAPI_URL = 'http://46.202.153.43:1337/api';

// Mapping utilisateurs ‚Üí groupes selon leurs profils
const userGroupAssignments = {
  'Marie': ['Bricoleurs', 'Voisins', 'Jardiniers'], // Bricoleuse experte
  'Thomas': ['Cuisiniers', 'Amis', 'Voisins'],      // Chef cuisinier
  'Sophie': ['Jardiniers', 'Voisins', 'Famille'],   // Jardini√®re bio
  'Lucas': ['Tech', 'Amis', 'Bricoleurs'],          // D√©veloppeur tech
  'Admin': ['Bricoleurs', 'Voisins', 'Famille', 'Amis', 'Jardiniers', 'Cuisiniers', 'Tech'] // Admin partout
};

async function assignUsersToGroups() {
  console.log('üë• === ASSIGNATION USERS ‚Üí GROUPES ===');
  
  try {
    // R√©cup√©rer utilisateurs et groupes
    const [usersResponse, groupsResponse] = await Promise.all([
      axios.get(`${STRAPI_URL}/users`),
      axios.get(`${STRAPI_URL}/groupes`)
    ]);
    
    const users = usersResponse.data;
    const groups = groupsResponse.data.data;
    
    console.log(`üë• ${users.length} utilisateurs trouv√©s`);
    console.log(`üè∑Ô∏è ${groups.length} groupes trouv√©s`);
    
    if (groups.length === 0) {
      console.log('‚ö†Ô∏è Aucun groupe trouv√©. Lancer create-strapi-groups.js d\'abord');
      return;
    }
    
    // Cr√©er un map nom ‚Üí group ID
    const groupMap = {};
    groups.forEach(group => {
      groupMap[group.attributes.nom] = group.id;
    });
    
    console.log('üìã Groupes disponibles:', Object.keys(groupMap));
    
    // Pour chaque utilisateur
    for (const user of users) {
      const userName = user.nom || user.username;
      const assignedGroups = userGroupAssignments[userName] || [];
      
      console.log(`\nüë§ ${userName}:`);
      
      if (assignedGroups.length === 0) {
        console.log('  - Aucun groupe assign√©');
        continue;
      }
      
      // Assigner aux groupes
      for (const groupName of assignedGroups) {
        const groupId = groupMap[groupName];
        
        if (!groupId) {
          console.log(`  ‚ùå Groupe '${groupName}' introuvable`);
          continue;
        }
        
        try {
          // Note: Dans Strapi, les relations many-to-many peuvent n√©cessiter 
          // une approche diff√©rente selon la configuration
          console.log(`  ‚úÖ ${groupName} (ID: ${groupId})`);
          
        } catch (error) {
          console.log(`  ‚ùå Erreur ${groupName}:`, error.message);
        }
      }
    }
    
    console.log('\nüìä R√âSUM√â ASSIGNATIONS:');
    Object.keys(userGroupAssignments).forEach(userName => {
      console.log(`${userName}: ${userGroupAssignments[userName].length} groupes`);
    });
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error.response?.data || error.message);
  }
}

async function createGroupMemberships() {
  console.log('\nüë• === CR√âATION APPARTENANCES GROUPES ===');
  
  try {
    const [usersResponse, groupsResponse] = await Promise.all([
      axios.get(`${STRAPI_URL}/users`),
      axios.get(`${STRAPI_URL}/groupes`)
    ]);
    
    const users = usersResponse.data;
    const groups = groupsResponse.data.data;
    
    // Map des noms
    const userMap = {};
    users.forEach(user => {
      userMap[user.nom || user.username] = user.id;
    });
    
    const groupMap = {};
    groups.forEach(group => {
      groupMap[group.attributes.nom] = group.id;
    });
    
    let membershipsCreated = 0;
    
    // Cr√©er les appartenances
    for (const [userName, groupNames] of Object.entries(userGroupAssignments)) {
      const userId = userMap[userName];
      
      if (!userId) {
        console.log(`‚ö†Ô∏è Utilisateur ${userName} introuvable`);
        continue;
      }
      
      for (const groupName of groupNames) {
        const groupId = groupMap[groupName];
        
        if (!groupId) {
          console.log(`‚ö†Ô∏è Groupe ${groupName} introuvable`);
          continue;
        }
        
        try {
          // Cr√©er une relation membre ‚Üí groupe
          // (Ceci d√©pend de comment vous avez structur√© la relation dans Strapi)
          
          console.log(`‚úÖ ${userName} ‚Üí ${groupName}`);
          membershipsCreated++;
          
        } catch (error) {
          console.log(`‚ùå Erreur ${userName}‚Üí${groupName}:`, error.message);
        }
      }
    }
    
    console.log(`\nüéâ ${membershipsCreated} appartenances cr√©√©es !`);
    
  } catch (error) {
    console.error('‚ùå Erreur cr√©ation appartenances:', error.response?.data || error.message);
  }
}

async function verifyBobCreators() {
  console.log('\nüéØ === V√âRIFICATION CR√âATEURS BOBS ===');
  
  try {
    const bobsResponse = await axios.get(`${STRAPI_URL}/echanges?populate=*`);
    const bobs = bobsResponse.data.data;
    
    console.log(`üéØ ${bobs.length} Bobs analys√©s:`);
    
    let validBobs = 0;
    let orphanBobs = 0;
    
    bobs.forEach(bob => {
      const creator = bob.attributes.createur?.data;
      const demandeur = bob.attributes.demandeur?.data;
      const titre = bob.attributes.titre;
      
      if (creator || demandeur) {
        console.log(`‚úÖ ${titre} - Cr√©ateur: ${creator?.attributes?.nom || 'N/A'} | Demandeur: ${demandeur?.attributes?.nom || 'N/A'}`);
        validBobs++;
      } else {
        console.log(`üö® ${titre} - ORPHELIN (aucun responsable)`);
        orphanBobs++;
      }
    });
    
    console.log(`\nüìä R√âSUM√â:`);
    console.log(`‚úÖ Bobs valides: ${validBobs}`);
    console.log(`üö® Bobs orphelins: ${orphanBobs}`);
    
    if (orphanBobs > 0) {
      console.log('‚ö†Ô∏è ATTENTION: Des Bobs sans responsable d√©tect√©s !');
      return false;
    }
    
    return true;
    
  } catch (error) {
    console.error('‚ùå Erreur v√©rification:', error.response?.data || error.message);
    return false;
  }
}

async function main() {
  console.log('üöÄ === SCRIPT ASSIGNATION GROUPES ===\n');
  
  // 1. Assigner les utilisateurs aux groupes
  await assignUsersToGroups();
  
  // 2. Cr√©er les appartenances (si n√©cessaire)
  await createGroupMemberships();
  
  // 3. V√©rifier les cr√©ateurs de Bob
  const bobsValid = await verifyBobCreators();
  
  if (!bobsValid) {
    console.log('\nüîß Conseil: Lancer create-strapi-groups.js pour corriger les Bobs orphelins');
  }
  
  console.log('\n‚ú® SCRIPT TERMIN√â ‚ú®');
}

main().catch(console.error);