// Parcours complet de pr√™t/emprunt/service avec schema actuel
const axios = require('axios');

const STRAPI_URL = 'http://46.202.153.43:1337/api';

// Sc√©narios r√©alistes avec parcours complets
const scenarios = [
  {
    id: 'pret_perceuse_marie_thomas',
    title: 'üî® Parcours Pr√™t - Perceuse Marie ‚Üí Thomas',
    createur: { email: 'marie@bob.com', nom: 'Marie' },
    demandeur: { email: 'thomas@bob.com', nom: 'Thomas' },
    bob: {
      titre: 'Perceuse Bosch Pro 18V + Accessoires',
      description: 'Perceuse sans fil professionnelle avec mallette compl√®te : forets b√©ton/bois/m√©tal, visseuses, niveau laser. Parfaite pour tous travaux !',
      type: 'pret',
      bobizGagnes: 35,
      dureeJours: 7,
      conditions: 'Utilisation soign√©e, retour propre. Petit d√©p√¥t Bobiz demand√©.',
      adresse: '12 rue des Lilas, 75015 Paris'
    },
    messages: [
      { qui: 'demandeur', texte: 'Salut Marie ! Ta perceuse m\'int√©resse, je dois percer du b√©ton pour fixer une grande √©tag√®re.' },
      { qui: 'createur', texte: 'Parfait Thomas ! Elle est nickel pour le b√©ton arm√©. Tu peux passer la r√©cup√©rer quand ?' },
      { qui: 'demandeur', texte: 'Super ! Je peux passer demain matin vers 10h si √ßa te convient ?' },
      { qui: 'createur', texte: 'Parfait ! RDV devant chez moi. Je te montrerai les diff√©rents forets et le mode percussion üëç' },
      { qui: 'demandeur', texte: 'Top ! Merci beaucoup, tu me sauves la mise ! üôè' }
    ],
    finalisation: {
      evaluation_createur: { note: 5, commentaire: 'Thomas tr√®s soigneux ! Perceuse rendue impeccable et √† l\'heure. √âchange parfait !' },
      evaluation_demandeur: { note: 5, commentaire: 'Marie super sympa et g√©n√©reuse ! Mat√©riel pro en parfait √©tat. Recommande +++' },
      bobiz_mouvement: { createur: +35, demandeur: -35 }
    }
  },

  {
    id: 'emprunt_robot_sophie_lucas',
    title: 'ü§ñ Parcours Emprunt - Sophie cherche ‚Üí Lucas r√©pond',
    createur: { email: 'sophie@bob.com', nom: 'Sophie' },
    demandeur: { email: 'lucas@bob.com', nom: 'Lucas' },
    bob: {
      titre: 'RECHERCHE Robot cuiseur type Thermomix',
      description: 'Jeune maman cherche robot cuiseur pour pr√©parer pur√©es bio pour b√©b√©. Usage ponctuel 2-3x/semaine. Tr√®s soigneuse !',
      type: 'emprunt', 
      bobizGagnes: 50,
      dureeJours: 14,
      conditions: 'Nettoyage impeccable apr√®s chaque usage. Utilisation familiale uniquement.',
      adresse: '8 avenue Mozart, 75016 Paris'
    },
    messages: [
      { qui: 'demandeur', texte: 'Salut Sophie ! J\'ai un Thermomix TM6 qui dort. Je peux te le pr√™ter sans probl√®me !' },
      { qui: 'createur', texte: 'Oh Lucas tu es un ange ! Tu es s√ªr ? C\'est un appareil super cher...' },
      { qui: 'demandeur', texte: 'Aucun souci, on se conna√Æt bien ! Je te fais confiance. Tu veux que j\'apporte des recettes sp√©cial b√©b√© aussi ?' },
      { qui: 'createur', texte: 'Tu me touches l√† ! Oui pour les recettes, surtout bio et adaptation 6 mois + üë∂üíö' },
      { qui: 'demandeur', texte: 'Parfait ! Je passe demain avec le robot + le livre recettes bio + mes conseils perso !' }
    ],
    finalisation: {
      evaluation_createur: { note: 5, commentaire: 'Lucas incroyable ! Robot + recettes + conseils. G√©n√©rosit√© rare. MERCI !' },
      evaluation_demandeur: { note: 5, commentaire: 'Sophie adorable et respectueuse. Robot rendu nickel + petits pots en cadeau ! üòä' },
      bobiz_mouvement: { createur: -50, demandeur: +50 }
    }
  },

  {
    id: 'service_cours_lucas_marie',
    title: 'üìö Parcours Service - Lucas forme Marie (informatique)',
    createur: { email: 'lucas@bob.com', nom: 'Lucas' },
    demandeur: { email: 'marie@bob.com', nom: 'Marie' },
    bob: {
      titre: 'Cours informatique personnalis√©s √† domicile',
      description: 'Formation sur mesure : config tablette/smartphone, bureautique, internet s√©curis√©. Patience et p√©dagogie garanties !',
      type: 'service_offert',
      bobizGagnes: 70,
      dureeJours: 1,
      conditions: 'Chez vous ou visio. Mat√©riel fourni. Support √©crit inclus.',
      adresse: '√Ä domicile Paris 15e'
    },
    messages: [
      { qui: 'demandeur', texte: 'Salut Lucas ! J\'aurais besoin d\'aide pour ma nouvelle tablette iPad et apprendre les visios avec ma fille.' },
      { qui: 'createur', texte: 'Avec grand plaisir Marie ! iPad c\'est top. On peut faire √ßa tranquillement, tu pr√©f√®res chez toi ?' },
      { qui: 'demandeur', texte: 'Oui chez moi ce serait parfait ! Et j\'aimerais aussi s√©curiser mes mots de passe...' },
      { qui: 'createur', texte: 'Super programme ! Samedi matin √ßa va ? On fera iPad + s√©curit√© + visio, avec un caf√© ‚òï' },
      { qui: 'demandeur', texte: 'Parfait ! 10h samedi. Je pr√©parerai croissants et caf√©. Merci Lucas ! ü•ê' }
    ],
    finalisation: {
      evaluation_createur: { note: 5, commentaire: 'Marie excellente √©l√®ve ! Tr√®s attentive. Et les croissants √©taient d√©licieux ! üòã' },
      evaluation_demandeur: { note: 5, commentaire: 'Lucas p√©dagogue exceptionnel ! Patient, clair. Ma tablette n\'a plus de secrets !' },
      bobiz_mouvement: { createur: +70, demandeur: -70 }
    }
  }
];

let authTokens = {}; // Cache des tokens utilisateur

async function getAuthToken(email) {
  if (authTokens[email]) {
    return authTokens[email];
  }

  try {
    const response = await axios.post(`${STRAPI_URL}/auth/local`, {
      identifier: email,
      password: 'password123'
    });
    
    authTokens[email] = {
      token: response.data.jwt,
      user: response.data.user
    };
    
    return authTokens[email];
    
  } catch (error) {
    console.log(`‚ùå Auth failed for ${email}: ${error.response?.data?.error?.message}`);
    return null;
  }
}

async function createBob(scenario) {
  console.log(`\nüéØ Cr√©ation Bob: ${scenario.bob.titre}`);
  
  const auth = await getAuthToken(scenario.createur.email);
  if (!auth) return null;
  
  try {
    const response = await axios.post(`${STRAPI_URL}/echanges`, {
      data: {
        ...scenario.bob,
        dateCreation: new Date().toISOString(),
        statut: 'actif'
      }
    }, {
      headers: {
        'Authorization': `Bearer ${auth.token}`,
        'Content-Type': 'application/json'
      }
    });
    
    const bobId = response.data.data.id;
    console.log(`‚úÖ Bob cr√©√© (ID: ${bobId}) par ${scenario.createur.nom}`);
    return bobId;
    
  } catch (error) {
    console.log(`‚ùå Erreur cr√©ation Bob: ${error.response?.data?.error?.message || error.message}`);
    return null;
  }
}

async function simulateConversation(scenario, bobId) {
  console.log(`\nüí¨ Conversation entre ${scenario.createur.nom} et ${scenario.demandeur.nom}`);
  
  for (let i = 0; i < scenario.messages.length; i++) {
    const msg = scenario.messages[i];
    const isCreateur = msg.qui === 'createur';
    const email = isCreateur ? scenario.createur.email : scenario.demandeur.email;
    const nom = isCreateur ? scenario.createur.nom : scenario.demandeur.nom;
    
    const auth = await getAuthToken(email);
    if (!auth) continue;
    
    try {
      await axios.post(`${STRAPI_URL}/messages`, {
        data: {
          contenu: msg.texte,
          typeConversation: 'echange',
          dateEnvoi: new Date(Date.now() + i * 120000).toISOString(), // Messages espac√©s de 2min
          expediteur: auth.user.id,
          echange: bobId,
          lu: false
        }
      }, {
        headers: {
          'Authorization': `Bearer ${auth.token}`,
          'Content-Type': 'application/json'
        }
      });
      
      console.log(`üì§ ${nom}: ${msg.texte.substring(0, 60)}...`);
      
    } catch (error) {
      console.log(`‚ùå Erreur message: ${error.response?.data?.error?.message}`);
    }
    
    await new Promise(resolve => setTimeout(resolve, 300));
  }
  
  console.log(`‚úÖ ${scenario.messages.length} messages √©chang√©s`);
}

async function progressBobStatus(scenario, bobId) {
  console.log(`\nüìà Progression statuts Bob: ${scenario.createur.nom} ‚Üî ${scenario.demandeur.nom}`);
  
  const auth = await getAuthToken(scenario.createur.email);
  if (!auth) return false;
  
  const headers = {
    'Authorization': `Bearer ${auth.token}`,
    'Content-Type': 'application/json'
  };
  
  try {
    // 1. Passer en "en_cours"
    await axios.put(`${STRAPI_URL}/echanges/${bobId}`, {
      data: {
        statut: 'en_cours',
        dateDebut: new Date(Date.now() + 24*60*60*1000).toISOString() // Demain
      }
    }, { headers });
    
    console.log(`‚úÖ Statut: actif ‚Üí en_cours`);
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // 2. Passer en "termin√©"
    const finishDate = new Date(Date.now() + (scenario.bob.dureeJours + 1) * 24*60*60*1000);
    
    await axios.put(`${STRAPI_URL}/echanges/${bobId}`, {
      data: {
        statut: 'termine',
        dateFin: finishDate.toISOString()
      }
    }, { headers });
    
    console.log(`‚úÖ Statut: en_cours ‚Üí termin√©`);
    console.log(`üìÖ Dur√©e simul√©e: ${scenario.bob.dureeJours} jours`);
    
    return true;
    
  } catch (error) {
    console.log(`‚ùå Erreur progression statut: ${error.response?.data?.error?.message}`);
    return false;
  }
}

async function createBobizTransactions(scenario, bobId) {
  console.log(`\nüí∞ Attribution BOBIZ: ${scenario.bob.bobizGagnes} points`);
  
  const transactions = [
    {
      auth: await getAuthToken(scenario.createur.email),
      amount: scenario.finalisation.bobiz_mouvement.createur,
      who: scenario.createur.nom
    },
    {
      auth: await getAuthToken(scenario.demandeur.email),
      amount: scenario.finalisation.bobiz_mouvement.demandeur,
      who: scenario.demandeur.nom
    }
  ];
  
  for (const tx of transactions) {
    if (!tx.auth) continue;
    
    try {
      await axios.post(`${STRAPI_URL}/bobiz-transactions`, {
        data: {
          points: Math.abs(tx.amount),
          type: tx.amount > 0 ? 'gain' : 'depense',
          source: 'echange_complete',
          description: `√âchange: ${scenario.bob.titre}`,
          dateTransaction: new Date().toISOString(),
          user: tx.auth.user.id,
          echange: bobId
        }
      }, {
        headers: {
          'Authorization': `Bearer ${tx.auth.token}`,
          'Content-Type': 'application/json'
        }
      });
      
      const symbol = tx.amount > 0 ? '+' : '';
      console.log(`üíé ${tx.who}: ${symbol}${tx.amount} Bobiz`);
      
    } catch (error) {
      console.log(`‚ùå Transaction ${tx.who}: ${error.response?.data?.error?.message}`);
    }
  }
}

async function createEvaluationMessages(scenario, bobId) {
  console.log(`\n‚≠ê √âvaluations finales`);
  
  const evaluations = [
    {
      auth: await getAuthToken(scenario.createur.email),
      eval: scenario.finalisation.evaluation_createur,
      who: scenario.createur.nom
    },
    {
      auth: await getAuthToken(scenario.demandeur.email), 
      eval: scenario.finalisation.evaluation_demandeur,
      who: scenario.demandeur.nom
    }
  ];
  
  for (const ev of evaluations) {
    if (!ev.auth) continue;
    
    try {
      await axios.post(`${STRAPI_URL}/messages`, {
        data: {
          contenu: `‚≠ê √âVALUATION FINALE ‚≠ê\nNote: ${ev.eval.note}/5\n${ev.eval.commentaire}`,
          typeConversation: 'echange',
          dateEnvoi: new Date().toISOString(),
          expediteur: ev.auth.user.id,
          echange: bobId,
          lu: false
        }
      }, {
        headers: {
          'Authorization': `Bearer ${ev.auth.token}`,
          'Content-Type': 'application/json'
        }
      });
      
      console.log(`‚≠ê ${ev.who}: ${ev.eval.note}/5 - ${ev.eval.commentaire.substring(0, 40)}...`);
      
    } catch (error) {
      console.log(`‚ùå √âvaluation ${ev.who}: ${error.response?.data?.error?.message}`);
    }
  }
}

async function runCompleteScenario(scenario) {
  console.log(`\nüé¨ === ${scenario.title} ===`);
  
  // 1. Cr√©er le Bob
  const bobId = await createBob(scenario);
  if (!bobId) {
    console.log(`‚ö†Ô∏è Scenario ${scenario.id} abandonn√© - probl√®me cr√©ation Bob`);
    return null;
  }
  
  // 2. Simuler conversation
  await simulateConversation(scenario, bobId);
  
  // 3. Faire √©voluer les statuts
  const statusOk = await progressBobStatus(scenario, bobId);
  if (!statusOk) {
    console.log(`‚ö†Ô∏è Probl√®me progression statut`);
  }
  
  // 4. Attribution BOBIZ
  await createBobizTransactions(scenario, bobId);
  
  // 5. √âvaluations finales
  await createEvaluationMessages(scenario, bobId);
  
  console.log(`üéâ Parcours ${scenario.id} TERMIN√â !`);
  console.log(`   üìã Bob cr√©√© et finalis√©`);
  console.log(`   üí¨ Conversation compl√®te`);
  console.log(`   üìà Statuts: actif ‚Üí en_cours ‚Üí termin√©`);
  console.log(`   üí∞ BOBIZ √©chang√©s`);
  console.log(`   ‚≠ê √âvaluations enregistr√©es`);
  
  return {
    scenario: scenario.id,
    bobId,
    success: true
  };
}

async function generateFinalReport(results) {
  console.log(`\nüìä === RAPPORT FINAL PARCOURS COMPLETS ===`);
  
  const auth = await getAuthToken('marie@bob.com');
  if (!auth) return;
  
  try {
    const [bobsResp, messagesResp, transactionsResp] = await Promise.all([
      axios.get(`${STRAPI_URL}/echanges`, {
        headers: { 'Authorization': `Bearer ${auth.token}` }
      }),
      axios.get(`${STRAPI_URL}/messages`, {
        headers: { 'Authorization': `Bearer ${auth.token}` }
      }),
      axios.get(`${STRAPI_URL}/bobiz-transactions`, {
        headers: { 'Authorization': `Bearer ${auth.token}` }
      })
    ]);
    
    const bobs = bobsResp.data.data;
    const messages = messagesResp.data.data;
    const transactions = transactionsResp.data.data;
    
    console.log(`üéØ ${results.filter(r => r && r.success).length}/${scenarios.length} parcours r√©ussis:`);
    results.forEach(r => {
      if (r && r.success) {
        const scenario = scenarios.find(s => s.id === r.scenario);
        console.log(`  ‚úÖ ${scenario.title}`);
      }
    });
    
    console.log(`\nüìà STATISTIQUES G√âN√âR√âES:`);
    console.log(`  üìã ${bobs.length} Bobs total (${bobs.filter(b => b.attributes.statut === 'termine').length} termin√©s)`);
    console.log(`  üí¨ ${messages.length} messages √©chang√©s`);
    console.log(`  üí∞ ${transactions.length} transactions Bobiz`);
    
    const totalBobiz = transactions.reduce((sum, t) => sum + t.attributes.points, 0);
    console.log(`  üíé ${totalBobiz} Bobiz total trait√©s`);
    
    console.log(`\nüèÜ === √âCOSYST√àME BOB VIVANT ! ===`);
    console.log(`  ‚úÖ Parcours pr√™t/emprunt/service complets`);
    console.log(`  ‚úÖ Conversations r√©alistes avec n√©gociation`);
    console.log(`  ‚úÖ √âvolution statuts: actif ‚Üí en_cours ‚Üí termin√©`);
    console.log(`  ‚úÖ BOBIZ attribu√©s automatiquement`);
    console.log(`  ‚úÖ √âvaluations mutuelles enregistr√©es`);
    console.log(`  ‚úÖ Historique complet disponible`);
    
  } catch (error) {
    console.log(`‚ùå Erreur rapport: ${error.message}`);
  }
}

async function main() {
  console.log(`üöÄ === SIMULATION PARCOURS COMPLETS BOB ===\n`);
  console.log(`üéØ ${scenarios.length} sc√©narios √† ex√©cuter:`);
  scenarios.forEach(s => console.log(`  üìã ${s.title}`));
  
  const results = [];
  
  for (const scenario of scenarios) {
    const result = await runCompleteScenario(scenario);
    results.push(result);
    
    // Pause entre sc√©narios
    console.log(`\n‚è≥ Pause avant prochain sc√©nario...`);
    await new Promise(resolve => setTimeout(resolve, 2000));
  }
  
  await generateFinalReport(results);
  
  console.log(`\n‚ú® === SIMULATION TERMIN√âE ===`);
  console.log(`üí° L'√©cosyst√®me Bob est maintenant vivant avec des √©changes termin√©s !`);
}

main().catch(console.error);