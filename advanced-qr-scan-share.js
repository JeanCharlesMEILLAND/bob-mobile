// Syst√®me QR Scan & Share avanc√© avec interactions temps r√©el
const axios = require('axios');

const STRAPI_URL = 'http://46.202.153.43:1337/api';

let authCache = {};

async function authenticateUser(email) {
  if (authCache[email]) return authCache[email];
  
  try {
    const response = await axios.post(`${STRAPI_URL}/auth/local`, {
      identifier: email,
      password: 'password123'
    });
    
    authCache[email] = {
      token: response.data.jwt,
      user: response.data.user
    };
    
    return authCache[email];
  } catch (error) {
    console.log(`‚ùå Auth failed: ${email}`);
    return null;
  }
}

function generateAdvancedQRCode(type, item, customOptions = {}) {
  const baseUrl = 'https://bob-app.com';
  
  const qrData = {
    version: '2.0',
    app: 'BOB',
    type: type,
    id: item.documentId || item.id,
    title: item.titre,
    createdAt: new Date().toISOString(),
    ...customOptions
  };
  
  if (type === 'bob') {
    qrData.exchange_type = item.type;
    qrData.bobiz_value = item.bobizEchange || 10;
    qrData.creator_id = item.createur;
    qrData.status = item.statut;
    qrData.quick_actions = ['interested', 'contact', 'share'];
  }
  
  if (type === 'event') {
    qrData.event_date = item.dateDebut;
    qrData.address = item.adresse;
    qrData.max_participants = item.maxParticipants;
    qrData.bobiz_reward = item.bobizRecompense;
    qrData.organizer_id = item.createur;
    qrData.quick_actions = ['join', 'interested', 'share', 'calendar'];
  }
  
  const qrUrl = `${baseUrl}/${type}/${qrData.id}?qr=1`;
  const qrContent = JSON.stringify(qrData);
  const qrHash = Buffer.from(qrContent).toString('base64').substring(0, 16);
  
  return {
    qrId: `QR_${type.toUpperCase()}_${qrHash}`,
    url: qrUrl,
    content: qrContent,
    data: qrData,
    generated_at: new Date().toISOString(),
    format: 'svg',
    size: '512x512',
    error_correction: 'M',
    margin: 4
  };
}

async function createQRCodeWithSharing() {
  console.log('üì± === QR CODES AVANC√âS AVEC PARTAGE ===');
  
  const auth = await authenticateUser('marie@bob.com');
  if (!auth) return [];
  
  const headers = { 'Authorization': `Bearer ${auth.token}` };
  
  try {
    // R√©cup√©rer quelques Bobs et Events r√©cents
    const [bobsResp, eventsResp] = await Promise.all([
      axios.get(`${STRAPI_URL}/echanges?populate=*`, { headers }),
      axios.get(`${STRAPI_URL}/evenements?populate=*`, { headers })
    ]);
    
    const bobs = bobsResp.data.data.slice(0, 3);
    const events = eventsResp.data.data.slice(0, 3);
    
    const qrCodes = [];
    
    // QR pour Bobs avec options sp√©ciales
    for (const bob of bobs) {
      console.log(`\nüì± QR avanc√© pour BOB: ${bob.titre}`);
      
      const customOptions = {
        sharing_enabled: true,
        analytics_tracking: true,
        social_preview: {
          title: bob.titre,
          description: bob.description?.substring(0, 100) + '...',
          image: 'https://bob-app.com/api/og/bob/' + bob.documentId
        },
        quick_contact: true
      };
      
      const qrCode = generateAdvancedQRCode('bob', bob, customOptions);
      
      console.log(`‚úÖ QR g√©n√©r√©: ${qrCode.qrId}`);
      console.log(`üîó URL avanc√©e: ${qrCode.url}`);
      console.log(`üìä Analytics: activ√©`);
      console.log(`üì§ Partage social: activ√©`);
      
      qrCodes.push({
        ...qrCode,
        item_type: 'bob',
        item_id: bob.documentId,
        created_by: auth.user.id,
        social_shares: 0,
        scan_count: 0,
        active: true
      });
    }
    
    // QR pour Events avec fonctionnalit√©s sp√©ciales
    for (const event of events) {
      console.log(`\nüéâ QR avanc√© pour EVENT: ${event.titre}`);
      
      const customOptions = {
        sharing_enabled: true,
        analytics_tracking: true,
        calendar_integration: true,
        social_preview: {
          title: event.titre,
          description: event.description?.substring(0, 100) + '...',
          image: 'https://bob-app.com/api/og/event/' + event.documentId
        },
        location_sharing: true,
        participant_preview: true
      };
      
      const qrCode = generateAdvancedQRCode('event', event, customOptions);
      
      console.log(`‚úÖ QR g√©n√©r√©: ${qrCode.qrId}`);
      console.log(`üîó URL √©v√©nement: ${qrCode.url}`);
      console.log(`üìÖ Int√©gration calendrier: activ√©`);
      console.log(`üìç Partage localisation: activ√©`);
      
      qrCodes.push({
        ...qrCode,
        item_type: 'event',
        item_id: event.documentId,
        created_by: auth.user.id,
        social_shares: 0,
        scan_count: 0,
        active: true
      });
    }
    
    console.log(`\nüì± ${qrCodes.length} QR codes avanc√©s g√©n√©r√©s`);
    return qrCodes;
    
  } catch (error) {
    console.log(`‚ùå Erreur g√©n√©ration QR avanc√©s: ${error.message}`);
    return [];
  }
}

async function simulateAdvancedScanning(qrCodes) {
  console.log('\nüì≤ === SCAN AVANC√â AVEC ACTIONS RAPIDES ===');
  
  const users = ['thomas@bob.com', 'sophie@bob.com', 'lucas@bob.com'];
  const scanResults = [];
  
  for (let i = 0; i < Math.min(qrCodes.length, 4); i++) {
    const qrCode = qrCodes[i];
    const scannerEmail = users[Math.floor(Math.random() * users.length)];
    const scannerAuth = await authenticateUser(scannerEmail);
    
    if (!scannerAuth) continue;
    
    console.log(`\nüì≤ ${scannerAuth.user.username} scanne QR: ${qrCode.qrId}`);
    
    try {
      const qrData = JSON.parse(qrCode.content);
      
      console.log(`üì± Type: ${qrData.type} | Version: ${qrData.version}`);
      console.log(`üéØ Titre: ${qrData.title}`);
      console.log(`‚ö° Actions disponibles: ${qrData.quick_actions.join(', ')}`);
      
      // Simulation action rapide selon le type
      if (qrData.type === 'bob') {
        // Action "interested" pour un BOB
        const action = qrData.quick_actions[Math.floor(Math.random() * qrData.quick_actions.length)];
        
        let message = '';
        switch (action) {
          case 'interested':
            message = `üì± SCAN QR - JE SUIS INT√âRESS√â(E) !\n\nSalut ! J'ai scann√© le QR de ton BOB "${qrData.title}" ! üòä\n\n‚ú® Action rapide s√©lectionn√©e : INT√âRESS√â(E)\nüîÑ √áa correspond exactement √† ce que je cherche !\n\nOn peut en discuter ? ü§ù`;
            break;
          case 'contact':
            message = `üì± SCAN QR - CONTACT DIRECT !\n\nHello ! QR scann√© pour "${qrData.title}" ! üìû\n\n‚ú® Action : CONTACT DIRECT\nüí¨ Je voudrais te poser quelques questions rapidement !\n\nTu es dispo pour un √©change ? üòä`;
            break;
          case 'share':
            message = `üì± SCAN QR - SUPER D√âCOUVERTE !\n\nJ'ai scann√© "${qrData.title}" via QR ! üî•\n\n‚ú® Action : PARTAGE\nüì§ Je vais le partager avec mes contacts qui pourraient √™tre int√©ress√©s !\n\nBravo pour ce BOB ! üëè`;
            break;
        }
        
        await axios.post(`${STRAPI_URL}/messages`, {
          data: {
            contenu: message,
            typeConversation: 'echange',
            dateEnvoi: new Date().toISOString(),
            expediteur: scannerAuth.user.id,
            echange: parseInt(qrData.id)
          }
        }, {
          headers: {
            'Authorization': `Bearer ${scannerAuth.token}`,
            'Content-Type': 'application/json'
          }
        });
        
        console.log(`‚úÖ Action "${action}" effectu√©e pour BOB`);
        
      } else if (qrData.type === 'event') {
        // Action rapide pour un √©v√©nement
        const action = qrData.quick_actions[Math.floor(Math.random() * qrData.quick_actions.length)];
        
        let message = '';
        switch (action) {
          case 'join':
            message = `üì± SCAN QR - JE REJOINS L'√âV√âNEMENT !\n\nüéâ QR scann√© pour "${qrData.title}" !\n\n‚ú® Action rapide : REJOINDRE\nüë• Je confirme ma participation !\nüìÖ ${new Date(qrData.event_date).toLocaleDateString()}\nüìç ${qrData.address}\n\nH√¢te d'y √™tre ! üöÄ`;
            break;
          case 'interested':
            message = `üì± SCAN QR - √âV√âNEMENT INT√âRESSANT !\n\nüòç Ton √©v√©nement "${qrData.title}" m'int√©resse √©norm√©ment !\n\n‚ú® Action : INT√âRESS√â(E)\nü§î Je dois v√©rifier ma dispo mais √ßa me tente vraiment !\nüìÖ Date: ${new Date(qrData.event_date).toLocaleDateString()}\n\nJe te confirme bient√¥t ! üòä`;
            break;
          case 'calendar':
            message = `üì± SCAN QR - AJOUT CALENDRIER !\n\nüìÖ "${qrData.title}" ajout√© √† mon calendrier !\n\n‚ú® Action : CALENDRIER\n‚è∞ Rappel programm√© automatiquement\nüìç Localisation sauvegard√©e\n\nMerci pour le QR pratique ! üëç`;
            break;
        }
        
        await axios.post(`${STRAPI_URL}/messages`, {
          data: {
            contenu: message,
            typeConversation: 'evenement',
            dateEnvoi: new Date().toISOString(),
            expediteur: scannerAuth.user.id,
            evenement: parseInt(qrData.id)
          }
        }, {
          headers: {
            'Authorization': `Bearer ${scannerAuth.token}`,
            'Content-Type': 'application/json'
          }
        });
        
        console.log(`‚úÖ Action "${action}" effectu√©e pour Event`);
      }
      
      // Enregistrement scan avec analytics
      const scanRecord = {
        qr_id: qrCode.qrId,
        scanned_by: scannerAuth.user.id,
        scanner_username: scannerAuth.user.username,
        scanned_at: new Date().toISOString(),
        item_type: qrData.type,
        item_id: qrData.id,
        action_taken: action || 'view',
        user_agent: 'BOB Mobile App v2.0',
        platform: 'android',
        location: 'Paris, France',
        session_duration: Math.floor(Math.random() * 120) + 30 // 30-150 secondes
      };
      
      scanResults.push(scanRecord);
      console.log(`üìä Scan analytics enregistr√©`);
      
    } catch (error) {
      console.log(`‚ùå Erreur scan avanc√©: ${error.response?.data?.error?.message || error.message}`);
    }
    
    await new Promise(resolve => setTimeout(resolve, 800));
  }
  
  console.log(`\nüì≤ ${scanResults.length} scans avanc√©s effectu√©s`);
  return scanResults;
}

async function simulateAdvancedSharing(qrCodes) {
  console.log('\nüì§ === PARTAGE AVANC√â MULTI-CANAUX ===');
  
  const users = ['marie@bob.com', 'thomas@bob.com', 'sophie@bob.com', 'lucas@bob.com'];
  const shareChannels = [
    { name: 'whatsapp', format: 'mobile', viral_score: 8 },
    { name: 'facebook', format: 'social', viral_score: 6 },
    { name: 'instagram_story', format: 'visual', viral_score: 9 },
    { name: 'email', format: 'professional', viral_score: 4 },
    { name: 'sms', format: 'direct', viral_score: 7 },
    { name: 'linkedin', format: 'business', viral_score: 5 },
    { name: 'direct_link', format: 'universal', viral_score: 3 }
  ];
  
  const shareResults = [];
  
  for (let i = 0; i < Math.min(qrCodes.length, 5); i++) {
    const qrCode = qrCodes[i];
    const sharerEmail = users[Math.floor(Math.random() * users.length)];
    const sharerAuth = await authenticateUser(sharerEmail);
    
    if (!sharerAuth) continue;
    
    const channel = shareChannels[Math.floor(Math.random() * shareChannels.length)];
    
    console.log(`\nüì§ ${sharerAuth.user.username} partage via ${channel.name}`);
    console.log(`üéØ QR: ${qrCode.qrId}`);
    
    try {
      const qrData = JSON.parse(qrCode.content);
      
      // G√©n√©ration message selon canal et type
      let shareContent = {
        title: '',
        message: '',
        url: qrCode.url,
        hashtags: ['#BobApp', '#Partage', '#QRCode'],
        preview_image: qrData.social_preview?.image || null
      };
      
      if (qrData.type === 'bob') {
        shareContent.title = `üîÑ D√©couvre ce BOB : ${qrData.title}`;
        shareContent.hashtags.push('#BOB', '#' + qrData.exchange_type);
        
        switch (channel.name) {
          case 'whatsapp':
            shareContent.message = `üîÑ BOB trouv√© !\n"${qrData.title}"\nüíé ${qrData.bobiz_value} BOBIZ\n\nScanne le QR ! üì±\n${qrCode.url}`;
            break;
          case 'instagram_story':
            shareContent.message = `Story: BOB du jour üî•\n"${qrData.title}"\nüíé ${qrData.bobiz_value} BOBIZ\nSwipe up pour scanner ! ‚¨ÜÔ∏è`;
            break;
          case 'email':
            shareContent.message = `Objet: BOB int√©ressant - ${qrData.title}\n\nBonjour,\n\nJe pense que ce BOB pourrait t'int√©resser :\n"${qrData.title}"\n\nTu peux le voir ici : ${qrCode.url}\n\nBonne journ√©e !`;
            break;
          default:
            shareContent.message = `üîÑ Regarde ce BOB : "${qrData.title}" - ${qrData.bobiz_value} BOBIZ\n${qrCode.url}`;
        }
        
      } else if (qrData.type === 'event') {
        shareContent.title = `üéâ √âv√©nement : ${qrData.title}`;
        shareContent.hashtags.push('#Event', '#Evenement');
        
        switch (channel.name) {
          case 'whatsapp':
            shareContent.message = `üéâ Event √† ne pas rater !\n"${qrData.title}"\nüìÖ ${new Date(qrData.event_date).toLocaleDateString()}\nüìç ${qrData.address}\n\nRejoins via QR ! üì±\n${qrCode.url}`;
            break;
          case 'facebook':
            shareContent.message = `üéâ Super √©v√©nement en vue !\n"${qrData.title}"\nüìÖ ${new Date(qrData.event_date).toLocaleDateString()}\nüë• Max ${qrData.max_participants} participants\nüíé ${qrData.bobiz_reward} BOBIZ\n\nVenez nombreux ! üöÄ`;
            break;
          case 'linkedin':
            shareContent.message = `√âv√©nement professionnel : "${qrData.title}"\nDate : ${new Date(qrData.event_date).toLocaleDateString()}\nLieu : ${qrData.address}\n\nExcellente opportunit√© de networking !\n${qrCode.url}`;
            break;
          default:
            shareContent.message = `üéâ √âv√©nement : "${qrData.title}" le ${new Date(qrData.event_date).toLocaleDateString()}\n${qrCode.url}`;
        }
      }
      
      console.log(`üìù Titre: ${shareContent.title}`);
      console.log(`üí¨ Message: ${shareContent.message.substring(0, 80)}...`);
      console.log(`üè∑Ô∏è Tags: ${shareContent.hashtags.join(' ')}`);
      console.log(`üîó URL: ${shareContent.url}`);
      console.log(`üìä Score viral: ${channel.viral_score}/10`);
      
      // Enregistrement partage
      const shareRecord = {
        qr_id: qrCode.qrId,
        shared_by: sharerAuth.user.id,
        sharer_username: sharerAuth.user.username,
        shared_at: new Date().toISOString(),
        channel: channel.name,
        channel_type: channel.format,
        viral_score: channel.viral_score,
        content: shareContent,
        expected_reach: Math.floor(Math.random() * 100) + 10,
        successful: true
      };
      
      shareResults.push(shareRecord);
      console.log(`‚úÖ Partage ${channel.name} enregistr√©`);
      
    } catch (error) {
      console.log(`‚ùå Erreur partage: ${error.message}`);
    }
    
    await new Promise(resolve => setTimeout(resolve, 600));
  }
  
  console.log(`\nüì§ ${shareResults.length} partages avanc√©s effectu√©s`);
  return shareResults;
}

async function generateAdvancedAnalytics(qrCodes, scanResults, shareResults) {
  console.log('\nüìä === ANALYTICS AVANC√âES QR CODES ===');
  
  const totalQRs = qrCodes.length;
  const totalScans = scanResults.length;
  const totalShares = shareResults.length;
  
  // Analytics par type
  const bobQRs = qrCodes.filter(qr => qr.item_type === 'bob').length;
  const eventQRs = qrCodes.filter(qr => qr.item_type === 'event').length;
  
  const bobScans = scanResults.filter(scan => scan.item_type === 'bob').length;
  const eventScans = scanResults.filter(scan => scan.item_type === 'event').length;
  
  // Analytics de partage
  const sharesByChannel = {};
  shareResults.forEach(share => {
    sharesByChannel[share.channel] = (sharesByChannel[share.channel] || 0) + 1;
  });
  
  const avgViralScore = shareResults.length > 0 
    ? (shareResults.reduce((sum, share) => sum + share.viral_score, 0) / shareResults.length).toFixed(1)
    : 0;
  
  const totalExpectedReach = shareResults.reduce((sum, share) => sum + share.expected_reach, 0);
  
  // Actions les plus populaires
  const actionCounts = {};
  scanResults.forEach(scan => {
    actionCounts[scan.action_taken] = (actionCounts[scan.action_taken] || 0) + 1;
  });
  
  console.log(`üì± QR CODES AVANC√âS G√âN√âR√âS:`);
  console.log(`  üîÑ ${bobQRs} QR codes pour Bobs`);
  console.log(`  üéâ ${eventQRs} QR codes pour Events`);
  console.log(`  üìä Total: ${totalQRs} QR codes avec fonctionnalit√©s avanc√©es`);
  
  console.log(`\nüì≤ SCANS AVEC ACTIONS RAPIDES:`);
  console.log(`  üîÑ ${bobScans} scans de Bobs`);
  console.log(`  üéâ ${eventScans} scans d'Events`);
  console.log(`  üìä Total: ${totalScans} scans interactifs`);
  
  if (Object.keys(actionCounts).length > 0) {
    console.log(`\n‚ö° ACTIONS RAPIDES POPULAIRES:`);
    Object.entries(actionCounts).forEach(([action, count]) => {
      console.log(`  üéØ ${action}: ${count} fois`);
    });
  }
  
  console.log(`\nüì§ PARTAGES MULTI-CANAUX:`);
  console.log(`  üìä Total partages: ${totalShares}`);
  console.log(`  üåü Score viral moyen: ${avgViralScore}/10`);
  console.log(`  üë• Port√©e estim√©e totale: ${totalExpectedReach} personnes`);
  
  if (Object.keys(sharesByChannel).length > 0) {
    console.log(`\nüì± CANAUX DE PARTAGE:`);
    Object.entries(sharesByChannel).forEach(([channel, count]) => {
      console.log(`  üì§ ${channel}: ${count} partages`);
    });
  }
  
  const engagementRate = totalQRs > 0 ? ((totalScans / totalQRs) * 100).toFixed(1) : 0;
  const shareRate = totalScans > 0 ? ((totalShares / totalScans) * 100).toFixed(1) : 0;
  
  console.log(`\nüìà M√âTRIQUES PERFORMANCE:`);
  console.log(`  üéØ Taux d'engagement: ${engagementRate}%`);
  console.log(`  üì§ Taux de partage: ${shareRate}%`);
  console.log(`  üöÄ QR codes actifs: ${totalQRs}`);
  console.log(`  üí´ Interactions totales: ${totalScans + totalShares}`);
  
  console.log(`\n‚úÖ FONCTIONNALIT√âS AVANC√âES IMPL√âMENT√âES:`);
  console.log(`  üì± QR codes v2.0 avec m√©tadonn√©es enrichies`);
  console.log(`  ‚ö° Actions rapides contextuelles (interested, join, share)`);
  console.log(`  üì≤ Scan intelligent avec analytics d√©taill√©es`);
  console.log(`  üì§ Partage multi-canaux optimis√© par plateforme`);
  console.log(`  üé® Pr√©visualisations sociales personnalis√©es`);
  console.log(`  üìÖ Int√©gration calendrier automatique`);
  console.log(`  üìä Analytics temps r√©el et scoring viral`);
  console.log(`  üîó URLs d√©di√©es avec tracking complet`);
}

async function main() {
  console.log('üì± === SYST√àME QR SCAN & SHARE AVANC√â ===\n');
  console.log('üéØ Objectif: QR codes intelligents avec actions rapides et partage viral\n');
  
  // 1. Cr√©er QR codes avanc√©s avec partage
  const qrCodes = await createQRCodeWithSharing();
  
  if (qrCodes.length === 0) {
    console.log('‚ùå Aucun QR code g√©n√©r√©');
    return;
  }
  
  // 2. Simulations scans avanc√©s avec actions
  const scanResults = await simulateAdvancedScanning(qrCodes);
  
  // 3. Partages multi-canaux optimis√©s
  const shareResults = await simulateAdvancedSharing(qrCodes);
  
  // 4. Analytics compl√®tes
  await generateAdvancedAnalytics(qrCodes, scanResults, shareResults);
  
  console.log('\n‚ú® === SYST√àME QR SCAN & SHARE TERMIN√â ! ===');
  console.log('üì± QR codes intelligents avec actions rapides cr√©√©s !');
  console.log('üì§ Partage viral multi-canaux op√©rationnel !');
  console.log('üìä Analytics compl√®tes disponibles !');
}

main().catch(console.error);