// src/services/contacts.service.ts
import { apiClient } from './api';
import { logger, logContacts } from '../utils/logger';
import { 
  Groupe, 
  Contact, 
  CreateGroupeData, 
  UpdateGroupeData, 
  CreateContactData, 
  UpdateContactData,
  GroupeWithContactCount,
  ContactsByGroupe,
} from '../types';

export const contactsService = {
  // =================== GROUPES ===================
  
  /**
   * R√©cup√©rer tous mes groupes
   */
  getMyGroupes: async (token: string): Promise<Groupe[]> => {
    logContacts('R√©cup√©ration des groupes');
    
    try {
      const response = await apiClient.get('/groupes?populate=*', token);
      
      if (!response.ok) {
        throw new Error('Erreur r√©cup√©ration groupes');
      }
      
      const result = await response.json();
      logContacts('Groupes r√©cup√©r√©s', { count: result.data?.length || 0 });
      
      return result.data || [];
    } catch (error: any) {
      logger.error('contacts', 'Erreur getMyGroupes', error);
      throw error;
    }
  },

  /**
   * Cr√©er un nouveau groupe
   */
  createGroupe: async (data: CreateGroupeData, token: string): Promise<Groupe> => {
    logContacts('Cr√©ation groupe', { nom: data.nom });
    
    try {
      const response = await apiClient.post('/groupes', { data }, token);
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error?.message || 'Erreur cr√©ation groupe');
      }
      
      const result = await response.json();
      logContacts('Groupe cr√©√©', { nom: result.data.nom });
      
      return {
        id: result.data.documentId || result.data.id, // Strapi 5 utilise documentId
        nom: result.data.nom,
        couleur: result.data.couleur,
        description: result.data.description,
        membres: result.data.membres || []
      };
    } catch (error: any) {
      logger.error('contacts', 'Erreur createGroupe', error);
      throw error;
    }
  },

  /**
   * Modifier un groupe
   */
  updateGroupe: async (id: number, data: UpdateGroupeData, token: string): Promise<Groupe> => {
    console.log('‚úèÔ∏è ContactsService - Modification groupe:', id);
    
    try {
      const response = await apiClient.put(`/groupes/${id}`, { data }, token);
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error?.message || 'Erreur modification groupe');
      }
      
      const result = await response.json();
      console.log('‚úÖ Groupe modifi√©:', result.data.nom);
      
      return {
        id: result.data.documentId || result.data.id, // Strapi 5 utilise documentId
        nom: result.data.nom,
        couleur: result.data.couleur,
        description: result.data.description,
        membres: result.data.membres || []
      };
    } catch (error: any) {
      console.error('‚ùå Erreur updateGroupe:', error.message);
      throw error;
    }
  },

  /**
   * Supprimer un groupe
   */
  deleteGroupe: async (id: number, token: string): Promise<void> => {
    console.log('üóëÔ∏è ContactsService - Suppression groupe:', id);
    
    try {
      const response = await apiClient.delete(`/groupes/${id}`, token);
      
      if (!response.ok) {
        throw new Error('Erreur suppression groupe');
      }
      
      console.log('‚úÖ Groupe supprim√©');
    } catch (error: any) {
      console.error('‚ùå Erreur deleteGroupe:', error.message);
      throw error;
    }
  },

  /**
   * R√©cup√©rer un groupe avec ses contacts
   */
  getGroupeWithContacts: async (id: number, token: string): Promise<Groupe> => {
    console.log('üìã ContactsService - R√©cup√©ration groupe avec contacts:', id);
    
    try {
      const response = await apiClient.get(`/groupes/${id}?populate[membres][populate]=*`, token);
      
      if (!response.ok) {
        throw new Error('Erreur r√©cup√©ration groupe');
      }
      
      const result = await response.json();
      console.log('‚úÖ Groupe avec contacts r√©cup√©r√©');
      
      return {
        id: result.data.documentId || result.data.id, // Strapi 5 utilise documentId
        nom: result.data.nom,
        couleur: result.data.couleur,
        description: result.data.description,
        membres: result.data.membres || []
      };
    } catch (error: any) {
      console.error('‚ùå Erreur getGroupeWithContacts:', error.message);
      throw error;
    }
  },

  // =================== CONTACTS ===================
  
  /**
   * R√©cup√©rer tous mes contacts
   */
  getMyContacts: async (token: string): Promise<Contact[]> => {
    console.log('üë• ContactsService - R√©cup√©ration des contacts');
    
    try {
      // üîß POPULATE les champs utilisateur Bob pour d√©tection correcte
      // Essayer d'abord avec populate simple, puis fallback si √ßa √©choue
      let response;
      try {
        console.log('üîç Tentative avec populate utilisateurBobProfile...');
        response = await apiClient.get('/contacts?populate[groupes]=*&populate[utilisateurBobProfile]=*', token);
      } catch (populateError) {
        console.warn('‚ö†Ô∏è Populate utilisateurBobProfile √©chou√©, fallback vers populate simple');
        response = await apiClient.get('/contacts?populate=*', token);
      }
      
      // Si populate complexe √©choue, essayer populate simple
      if (!response.ok) {
        console.warn('‚ö†Ô∏è Populate complexe √©chou√©, tentative avec populate simple...');
        response = await apiClient.get('/contacts?populate=*', token);
      }
      
      // Si populate simple √©choue aussi, essayer sans populate
      if (!response.ok) {
        console.warn('‚ö†Ô∏è Populate simple √©chou√©, tentative sans populate...');
        response = await apiClient.get('/contacts', token);
      }
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Erreur API contacts:', {
          status: response.status,
          statusText: response.statusText,
          url: response.url,
          error: errorText.substring(0, 200)
        });
        throw new Error(`Erreur r√©cup√©ration contacts: ${response.status} - ${response.statusText}`);
      }
      
      const result = await response.json();
      
      // Debug: voir la vraie structure des donn√©es (filtrage automatique des donn√©es sensibles)
      logger.debug('contacts', 'Structure API Strapi', { 
        dataCount: result.data?.length,
        hasData: !!result.data,
        structure: result.data?.[0] ? 'Premier contact pr√©sent' : 'Aucun contact'
      });
      
      console.log('üîç Structure r√©ponse Strapi:', {
        hasData: !!result.data,
        dataLength: result.data?.length,
        metaInfo: result.meta,
        firstItem: result.data?.[0] ? Object.keys(result.data[0]) : 'pas de premier item'
      });
      
      // Strapi 5 : structure plate, pas d'attributes, documentId au lieu d'id  
      const contacts = result.data?.map((item: any) => {
        return {
          id: item.documentId || item.id, // Strapi 5 utilise documentId
          nom: item.nom,
          prenom: item.prenom,
          telephone: item.telephone,
          email: item.email,
          actif: item.actif,
          // üîß VRAIS CHAMPS pour d√©tection utilisateurs Bob
          estUtilisateurBob: item.estUtilisateurBob,
          utilisateurBobProfile: item.utilisateurBobProfile,
          // Fallback pour compatibilit√©
          aSurBob: item.aSurBob || item.estUtilisateurBob,
          estInvite: item.estInvite,
          dateAjout: item.dateAjout,
          source: item.source,
          groupes: item.groupes || []
        };
      }) || [];
      
      console.log('‚úÖ Contacts trait√©s avec succ√®s:', contacts.length);
      logContacts('Contacts r√©cup√©r√©s', { count: contacts.length });
      return contacts;
    } catch (error: any) {
      logger.error('contacts', 'Erreur getMyContacts', error);
      throw error;
    }
  },

  /**
   * Cr√©er un nouveau contact
   */
  createContact: async (data: CreateContactData, token: string): Promise<Contact> => {
    logContacts('Cr√©ation contact', { nom: data.nom });
    
    try {
      // üîß VALIDATION et nettoyage des donn√©es avant envoi
      const contactData = {
        nom: (data.nom || '').trim() || 'Nom manquant',
        prenom: (data.prenom || '').trim(),
        email: (data.email || '').trim() || null, // null au lieu de string vide
        telephone: (data.telephone || '').trim(),
        // Temporairement commenter groupes pour √©viter l'erreur de relation
        // groupes: data.groupeIds,
        actif: true,
        source: 'import_repertoire',
        dateAjout: new Date().toISOString(),
      };
      
      // üîß DEBUG: Loguer les donn√©es exactes envoy√©es
      console.log('üì§ Donn√©es contact envoy√©es √† Strapi:', {
        nom: contactData.nom,
        prenom: contactData.prenom,
        email: contactData.email,
        telephone: contactData.telephone,
        source: contactData.source
      });
      
      // üîß VALIDATION: V√©rifier les champs obligatoires
      if (!contactData.nom || contactData.nom === 'Nom manquant') {
        console.warn('‚ö†Ô∏è Nom manquant ou invalide, utilisation nom g√©n√©r√©');
        contactData.nom = `Contact_${Date.now()}`;
      }
      
      if (!contactData.telephone) {
        throw new Error('Le t√©l√©phone est obligatoire pour cr√©er un contact');
      }
      
      const response = await apiClient.post('/contacts', { data: contactData }, token);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Status HTTP:', response.status);
        console.error('‚ùå D√©tail erreur cr√©ation contact:', errorText);
        
        // üîß ANALYSE SP√âCIFIQUE DES ERREURS 500
        if (response.status === 500) {
          console.error('üö® ERREUR 500 STRAPI - Analyse:');
          console.error('üì§ Donn√©es qui ont caus√© l\'erreur:', {
            nom: contactData.nom,
            prenom: contactData.prenom,
            email: contactData.email,
            telephone: contactData.telephone,
            source: contactData.source
          });
          
          // V√©rifier si c'est un probl√®me de caract√®res sp√©ciaux
          if (contactData.nom.includes('√©') || contactData.nom.includes('√®') || contactData.nom.includes('√†') || contactData.nom.includes('√ß')) {
            console.warn('‚ö†Ô∏è Caract√®res sp√©ciaux d√©tect√©s dans le nom, possible cause de l\'erreur 500');
          }
          
          // Essayer de cr√©er une version "safe" du contact
          console.log('üîÑ Tentative de cr√©ation avec donn√©es nettoy√©es...');
          const safeContactData = {
            ...contactData,
            nom: contactData.nom
              .normalize('NFD') // D√©composer les caract√®res accentu√©s
              .replace(/[\u0300-\u036f]/g, '') // Supprimer les accents
              .replace(/[^a-zA-Z0-9\s\-\.]/g, '') // Supprimer caract√®res sp√©ciaux
              .trim(),
            prenom: (contactData.prenom || '')
              .normalize('NFD')
              .replace(/[\u0300-\u036f]/g, '')
              .replace(/[^a-zA-Z0-9\s\-\.]/g, '')
              .trim(),
            email: contactData.email ? contactData.email.toLowerCase().trim() : null
          };
          
          console.log('üßπ Donn√©es nettoy√©es:', safeContactData);
          
          try {
            const retryResponse = await apiClient.post('/contacts', { data: safeContactData }, token);
            if (retryResponse.ok) {
              console.log('‚úÖ Cr√©ation r√©ussie avec donn√©es nettoy√©es !');
              const result = await retryResponse.json();
              const newContact: Contact = {
                id: result.data.documentId, // Strapi 5 cl√© primaire
                internalId: result.data.id,
                nom: result.data.nom,
                prenom: result.data.prenom,
                telephone: result.data.telephone,
                email: result.data.email,
                actif: result.data.actif !== false,
                estUtilisateurBob: result.data.estUtilisateurBob === true,
                utilisateurBobProfile: result.data.utilisateurBobProfile,
                aSurBob: result.data.estUtilisateurBob === true || result.data.aSurBob === true,
                estInvite: result.data.estInvite === true,
                dateAjout: result.data.dateAjout || result.data.createdAt,
                source: result.data.source || 'import_repertoire',
                groupes: Array.isArray(result.data.groupes) ? result.data.groupes : []
              };
              return newContact;
            }
          } catch (retryError) {
            console.error('‚ùå M√™me avec donn√©es nettoy√©es, √©chec:', retryError);
          }
        }
        
        try {
          const errorData = JSON.parse(errorText);
          throw new Error(errorData.error?.message || `Erreur ${response.status}: ${errorText.substring(0, 200)}`);
        } catch {
          throw new Error(`Erreur ${response.status}: ${errorText.substring(0, 200)}`);
        }
      }
      
      const result = await response.json();
      const newContact: Contact = {
        id: result.data.documentId, // Strapi 5 cl√© primaire
        internalId: result.data.id,
        nom: result.data.nom,
        prenom: result.data.prenom,
        telephone: result.data.telephone,
        email: result.data.email,
        actif: result.data.actif !== false,
        estUtilisateurBob: result.data.estUtilisateurBob === true,
        utilisateurBobProfile: result.data.utilisateurBobProfile,
        aSurBob: result.data.estUtilisateurBob === true || result.data.aSurBob === true,
        estInvite: result.data.estInvite === true,
        dateAjout: result.data.dateAjout || result.data.createdAt,
        source: result.data.source || 'import_repertoire',
        groupes: Array.isArray(result.data.groupes) ? result.data.groupes : []
      };
      
      console.log('‚úÖ Contact cr√©√©:', newContact.nom);
      return newContact;
    } catch (error: any) {
      console.error('‚ùå D√©tail erreur cr√©ation contact:', error);
      // Status d√©j√† logg√© plus haut dans le if (!response.ok)
      
      // Gestion sp√©cifique des doublons (409 Conflict) 
      if (error.response?.status === 409 || error.message?.includes('409') || error.message?.includes('existe d√©j√†') || error.message?.includes('ConflictError')) {
        console.log('‚ö†Ô∏è Contact existe d√©j√† (409), tentative de r√©cup√©ration...');
        console.log('üìã Donn√©es du contact √† cr√©er:', {
          nom: data.nom,
          prenom: data.prenom,
          telephone: data.telephone
        });
        
        try {
          console.log('üîç Recherche contact existant pour t√©l√©phone:', data.telephone);
          
          // Utiliser la m√©thode am√©lior√©e pour rechercher par t√©l√©phone
          const existingContact = await contactsService.findContactByPhone(data.telephone, token);
          if (existingContact) {
            console.log('‚úÖ Contact existant r√©cup√©r√©:', {
              id: existingContact.id,
              nom: existingContact.nom,
              prenom: existingContact.prenom,
              telephone: existingContact.telephone
            });
            return existingContact;
          }
          
          console.log('‚ùå Aucune m√©thode n\'a pu r√©cup√©rer le contact existant');
          
        } catch (getError: any) {
          console.log('‚ö†Ô∏è Erreur lors de la r√©cup√©ration du contact existant:', getError.message);
        }
        
        // Si on arrive ici, on ne peut pas r√©cup√©rer le contact existant
        // mais on sait qu'il existe (409), donc on cr√©e un contact temporaire
        // avec les donn√©es fournies mais un ID factice
        console.log('üîÑ Cr√©ation d\'un contact temporaire car r√©cup√©ration impossible');
        return {
          id: Date.now(), // ID temporaire unique
          nom: data.nom,
          prenom: data.prenom,
          email: data.email,
          telephone: data.telephone,
          actif: true,
          source: 'import_repertoire',
          dateAjout: new Date().toISOString(),
          groupes: []
        };
      }
      
      console.error('‚ùå Erreur createContact:', error.message);
      throw error;
    }
  },

  /**
   * Modifier un contact
   */
  updateContact: async (id: number | string, data: UpdateContactData, token: string): Promise<Contact> => {
    console.log('‚úèÔ∏è ContactsService - Modification contact:', id);
    
    try {
      // üîß STRAPI 5: Utiliser directement le documentId dans l'URL standard
      console.log('üîß Strapi 5 - Tentative PUT /contacts/' + id);
      let response = await apiClient.put(`/contacts/${id}`, { data }, token);
      
      // Si PUT √©choue, essayer avec PATCH (parfois requis dans Strapi 5)
      if (!response.ok && response.status === 405) {
        console.log('‚ö†Ô∏è PUT Method Not Allowed, tentative avec PATCH...');
        response = await apiClient.patch(`/contacts/${id}`, { data }, token);
      }
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Erreur updateContact d√©tail:', {
          status: response.status,
          statusText: response.statusText,
          url: response.url,
          contactId: id,
          method: response.status === 405 ? 'PUT puis PATCH √©chou√©s' : 'PUT √©chou√©',
          dataEnvoyee: JSON.stringify(data).substring(0, 150),
          error: errorText.substring(0, 200)
        });
        
        // Si m√™me PATCH √©choue, peut-√™tre que le champ n'est pas modifiable
        if (response.status === 405) {
          console.warn('üö® Erreur 405: Le champ estUtilisateurBob ou utilisateurBobProfile n\'est peut-√™tre pas modifiable via l\'API');
          console.warn('üí° Solution: V√©rifier les permissions dans Strapi Admin ou utiliser un endpoint custom');
        }
        
        let errorData;
        try {
          errorData = JSON.parse(errorText);
        } catch {
          errorData = { error: { message: errorText } };
        }
        
        throw new Error(errorData.error?.message || `Erreur modification contact ${response.status}`);
      }
      
      const result = await response.json();
      const updatedContact: Contact = {
        id: result.data.documentId, // Strapi 5 utilise documentId comme cl√© primaire
        internalId: result.data.id, // ID num√©rique interne
        nom: result.data.nom,
        prenom: result.data.prenom,
        telephone: result.data.telephone,
        email: result.data.email,
        actif: result.data.actif !== false,
        estUtilisateurBob: result.data.estUtilisateurBob === true,
        utilisateurBobProfile: result.data.utilisateurBobProfile,
        aSurBob: result.data.estUtilisateurBob === true || result.data.aSurBob === true,
        estInvite: result.data.estInvite === true,
        dateAjout: result.data.dateAjout || result.data.updatedAt,
        source: result.data.source || 'import_repertoire',
        groupes: Array.isArray(result.data.groupes) ? result.data.groupes : []
      };
      
      console.log('‚úÖ Contact modifi√©:', updatedContact.nom);
      return updatedContact;
    } catch (error: any) {
      console.error('‚ùå Erreur updateContact:', error.message);
      throw error;
    }
  },

  /**
   * Supprimer un contact
   */
  deleteContact: async (id: number, token: string): Promise<void> => {
    console.log('üóëÔ∏è ContactsService - Suppression contact:', id);
    
    try {
      // Tester diff√©rents endpoints Strapi 5
      const endpoints = [
        `/api/contacts/${id}`,
        `/contacts/${id}`,
      ];

      let response = null;
      let lastError = null;

      for (const endpoint of endpoints) {
        try {
          console.log(`üîÑ Tentative suppression ${endpoint}...`);
          response = await apiClient.delete(endpoint, token);
          
          if (response.ok) {
            console.log(`‚úÖ Suppression r√©ussie avec ${endpoint}`);
            break;
          } else {
            const errorText = await response.text();
            console.log(`‚ö†Ô∏è ${endpoint} - Status: ${response.status} - ${errorText.substring(0, 100)}`);
            lastError = `${endpoint}: ${response.status}`;
          }
        } catch (error: any) {
          console.log(`‚ùå ${endpoint} - Erreur:`, error.message);
          lastError = `${endpoint}: ${error.message}`;
          continue;
        }
      }

      if (!response || !response.ok) {
        console.error('‚ùå Tous les endpoints de suppression ont √©chou√©');
        console.error('‚ùå Derni√®re erreur:', lastError);
        throw new Error(`Impossible de supprimer le contact: ${lastError}`);
      }
      
      console.log('‚úÖ Contact supprim√©');
    } catch (error: any) {
      console.error('‚ùå Erreur deleteContact:', error.message);
      throw error;
    }
  },

  // =================== HELPERS ===================
  
  /**
   * R√©cup√©rer les groupes avec nombre de contacts
   */
  getGroupesWithContactCount: async (token: string): Promise<GroupeWithContactCount[]> => {
    console.log('üìä ContactsService - Groupes avec comptage');
    
    try {
      const groupes = await contactsService.getMyGroupes(token);
      
      const groupesWithCount: GroupeWithContactCount[] = groupes.map(groupe => ({
        ...groupe,
        contactCount: groupe.membres?.length || 0,
      }));
      
      console.log('‚úÖ Groupes avec comptage r√©cup√©r√©s');
      return groupesWithCount;
    } catch (error: any) {
      console.error('‚ùå Erreur getGroupesWithContactCount:', error.message);
      throw error;
    }
  },

  /**
   * Organiser les contacts par groupe
   */
  getContactsByGroupe: async (token: string): Promise<ContactsByGroupe> => {
    console.log('üìÇ ContactsService - Contacts par groupe');
    
    try {
      const groupes = await contactsService.getMyGroupes(token);
      
      const contactsByGroupe: ContactsByGroupe = {};
      
      for (const groupe of groupes) {
        contactsByGroupe[groupe.id] = {
          groupe,
          contacts: groupe.membres || [],
        };
      }
      
      console.log('‚úÖ Contacts organis√©s par groupe');
      return contactsByGroupe;
    } catch (error: any) {
      console.error('‚ùå Erreur getContactsByGroupe:', error.message);
      throw error;
    }
  },

  // =================== CONTACTS AVANC√âS ===================

  /**
   * Rechercher des contacts par t√©l√©phone
   */
  findContactByPhone: async (telephone: string, token: string): Promise<Contact | null> => {
    console.log('üîç ContactsService - Recherche par t√©l√©phone:', telephone);
    
    try {
      // D'abord essayer l'endpoint d√©di√©
      const url = `/contacts/phone/${encodeURIComponent(telephone)}`;
      console.log('üåê URL recherche:', url);
      
      const response = await apiClient.get(url, token);
      
      console.log('üì° R√©ponse recherche:', {
        status: response.status,
        ok: response.ok,
        url: response.url
      });
      
      if (response.ok) {
        const result = await response.json();
        const contacts = result.data || [];
        
        if (contacts.length > 0) {
          const contact = contacts[0];
          return {
            id: contact.id,
            ...contact.attributes || contact,
          };
        }
      }
      
      // Si l'endpoint d√©di√© ne fonctionne pas (404 ou autre erreur), 
      // utiliser la m√©thode de fallback avec filtres Strapi
      console.log('‚ö†Ô∏è Endpoint d√©di√© non disponible, utilisation du fallback avec filtres');
      
      // Essayer avec filtres Strapi
      const fallbackUrl = `/contacts?filters[telephone][$eq]=${encodeURIComponent(telephone)}`;
      console.log('üîÑ URL fallback:', fallbackUrl);
      
      const fallbackResponse = await apiClient.get(fallbackUrl, token);
      
      if (!fallbackResponse.ok) {
        console.log('‚ùå Fallback aussi √©chou√©, retour null');
        return null;
      }
      
      const fallbackResult = await fallbackResponse.json();
      const fallbackContacts = fallbackResult.data || [];
      
      if (fallbackContacts.length > 0) {
        console.log('‚úÖ Contact trouv√© via fallback');
        const contact = fallbackContacts[0];
        return {
          id: contact.id,
          ...contact.attributes || contact,
        };
      }
      
      console.log('üì± Contact non trouv√© par aucune m√©thode');
      return null;
      
    } catch (error: any) {
      console.error('‚ùå Erreur findContactByPhone:', error.message);
      
      // En dernier recours, essayer de r√©cup√©rer tous les contacts et filtrer localement
      console.log('üö® Dernier recours: recherche manuelle dans tous les contacts');
      try {
        const allContacts = await contactsService.getMyContacts(token);
        console.log(`üìä Recherche manuelle dans ${allContacts.length} contacts`);
        
        // Normaliser les num√©ros pour la comparaison
        const normalizePhone = (phone: string) => phone.replace(/[^\+\d]/g, '');
        const normalizedSearch = normalizePhone(telephone);
        
        const foundContact = allContacts.find(c => {
          if (!c.telephone) return false;
          const normalizedContact = normalizePhone(c.telephone);
          return normalizedContact === normalizedSearch;
        });
        
        if (foundContact) {
          console.log('‚úÖ Contact trouv√© via recherche manuelle:', foundContact.nom);
          return foundContact;
        }
        
        console.log('‚ùå Contact vraiment introuvable');
        return null;
      } catch (manualError) {
        console.error('‚ùå √âchec recherche manuelle:', manualError);
        return null;
      }
    }
  },

  /**
   * V√©rifier quels contacts ont Bob
   */
  checkBobUsers: async (telephones: string[], token: string): Promise<Record<string, boolean>> => {
    console.log('üîç ContactsService - V√©rification utilisateurs Bob:', telephones.length);
    
    try {
      const response = await apiClient.post('/contacts/check-bob-users', {
        telephones,
      }, token);
      
      if (!response.ok) {
        throw new Error('Erreur v√©rification utilisateurs Bob');
      }
      
      const result = await response.json();
      console.log('‚úÖ V√©rification Bob termin√©e');
      
      return result.data?.results || {};
    } catch (error: any) {
      console.error('‚ùå Erreur checkBobUsers:', error.message);
      
      // Fallback: marquer tous comme non Bob
      const fallback: Record<string, boolean> = {};
      telephones.forEach(tel => {
        fallback[tel] = false;
      });
      return fallback;
    }
  },

  /**
   * Import en masse de contacts
   */
  bulkCreateContacts: async (contacts: CreateContactData[], token: string): Promise<{
    created: Contact[];
    errors: any[];
    duplicates: any[];
  }> => {
    console.log('üì• ContactsService - Import en masse:', contacts.length, 'contacts');
    
    try {
      const response = await apiClient.post('/contacts/bulk-create', {
        contacts,
      }, token);
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error?.message || 'Erreur import en masse');
      }
      
      const result = await response.json();
      console.log('‚úÖ Import en masse termin√©');
      
      return result.data;
    } catch (error: any) {
      console.error('‚ùå Erreur bulkCreateContacts:', error.message);
      throw error;
    }
  },

  /**
   * V√©rifier et d√©tecter les vrais utilisateurs Bob (m√©thode robuste)
   */
  detectRealBobUsers: async (token: string): Promise<{
    bobUsers: any[];
    contactsWithBob: Contact[];
    stats: {
      totalUsers: number;
      contactsUpdated: number;
    };
  }> => {
    console.log('üîç ContactsService - D√©tection vrais utilisateurs Bob');
    
    try {
      // 1. R√©cup√©rer tous les vrais utilisateurs Bob inscrits
      const usersResponse = await apiClient.get('/users?populate=*', token);
      
      if (!usersResponse.ok) {
        throw new Error('Erreur r√©cup√©ration utilisateurs Bob');
      }
      
      const usersResult = await usersResponse.json();
      const bobUsers = usersResult || [];
      
      console.log(`üë• ${bobUsers.length} utilisateurs Bob inscrits d√©tect√©s`);
      
      // 2. R√©cup√©rer tous mes contacts
      const allContacts = await contactsService.getMyContacts(token);
      console.log(`üìã ${allContacts.length} contacts √† v√©rifier`);
      
      // 3. Cr√©er un mapping t√©l√©phone -> utilisateur Bob (Strapi 5)
      const bobUsersByPhone: Record<string, any> = {};
      bobUsers.forEach((user: any) => {
        if (user.telephone) {
          const normalizedPhone = user.telephone.replace(/[^\+\d]/g, '');
          bobUsersByPhone[normalizedPhone] = user;
          console.log(`üìû User Bob Strapi 5: ${user.username} (${user.telephone}) - documentId: ${user.documentId}`);
        }
      });
      
      // 4. Identifier les contacts qui sont des utilisateurs Bob
      const contactsWithBob: Contact[] = [];
      let contactsUpdated = 0;
      
      for (const contact of allContacts) {
        if (!contact.telephone) continue;
        
        const normalizedPhone = contact.telephone.replace(/[^\+\d]/g, '');
        const bobUser = bobUsersByPhone[normalizedPhone];
        
        if (bobUser) {
          console.log(`‚úÖ ${contact.nom} EST un utilisateur Bob (${bobUser.username})`);
          
          // üîß SOLUTION ALTERNATIVE: Enrichir c√¥t√© client sans modifier Strapi
          // (car les champs estUtilisateurBob/utilisateurBobProfile semblent read-only)
          console.log('üí° Enrichissement c√¥t√© client (pas de modification Strapi)');
          
          const enrichedContact = {
            ...contact,
            // üîß Marquer comme utilisateur Bob c√¥t√© client
            estUtilisateurBob: true,
            utilisateurBobProfile: bobUser,
            aSurBob: true, // Pour compatibilit√© avec l'ancien code
            userProfile: {
              id: bobUser.documentId || bobUser.id,
              nom: bobUser.nom || contact.nom,
              prenom: bobUser.prenom || contact.prenom,
              email: bobUser.email,
              telephone: bobUser.telephone,
              bobizPoints: bobUser.bobizPoints || 0,
              niveau: bobUser.niveau || 'D√©butant',
              estEnLigne: bobUser.estEnLigne || false,
              derniereActivite: bobUser.dernierConnexion,
              dateInscription: bobUser.dateInscription,
            }
          };
          
          contactsWithBob.push(enrichedContact);
          contactsUpdated++; // Compte comme "mis √† jour" m√™me si c'est c√¥t√© client
          
          // üí° Enrichissement r√©ussi c√¥t√© client - pas besoin de modifier Strapi
          console.log(`üí° ${contact.nom} enrichi avec profil utilisateur Bob`);
        }
      }
      
      console.log(`‚úÖ D√©tection termin√©e: ${contactsWithBob.length} utilisateurs Bob d√©tect√©s, ${contactsUpdated} contacts mis √† jour`);
      
      return {
        bobUsers,
        contactsWithBob,
        stats: {
          totalUsers: bobUsers.length,
          contactsUpdated
        }
      };
      
    } catch (error: any) {
      console.error('‚ùå Erreur detectRealBobUsers:', error);
      throw error;
    }
  },

  /**
   * Synchroniser les contacts avec les utilisateurs Bob
   */
  syncWithBobUsers: async (token: string): Promise<{
    totalChecked: number;
    updated: number;
  }> => {
    console.log('üîÑ ContactsService - Synchronisation avec utilisateurs Bob');
    
    try {
      const response = await apiClient.post('/contacts/sync-bob-users', {}, token);
      
      if (!response.ok) {
        throw new Error('Erreur synchronisation Bob');
      }
      
      const result = await response.json();
      console.log('‚úÖ Synchronisation Bob termin√©e');
      
      return result.data;
    } catch (error: any) {
      console.error('‚ùå Erreur syncWithBobUsers:', error.message);
      throw error;
    }
  },
};