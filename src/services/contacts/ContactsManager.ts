// src/services/contacts/ContactsManager.ts - Gestionnaire central unifi√©

import { ContactsRepository } from './ContactsRepository';
import { ContactsSync } from './ContactsSync';
import { ContactsScanner } from './ContactsScanner';
import { contactsService } from '../contacts.service';
import { authService } from '../auth.service';
import { invitationsService } from '../invitations.service';
import { apiClient } from '../api';
import { 
  Contact, 
  ContactsStats, 
  ImportResult, 
  SyncResult,
  ScanResult,
  CONTACTS_CONFIG 
} from '../../types/contacts.unified';

export class ContactsManager {
  private static instance: ContactsManager;
  
  readonly repository: ContactsRepository;
  private readonly contactsSync: ContactsSync;
  private readonly contactsScanner: ContactsScanner;
  private isSyncBlocked = false;
  private isOperationInProgress = false;
  private isBatchMode = false; // üöÄ OPTIMISATION: Mode batch pour limiter les recalculs

  private constructor() {
    this.repository = new ContactsRepository();
    this.contactsSync = new ContactsSync(this.repository);
    this.contactsScanner = new ContactsScanner();
  }

  static getInstance(): ContactsManager {
    if (!ContactsManager.instance) {
      ContactsManager.instance = new ContactsManager();
    }
    return ContactsManager.instance;
  }

  // === GESTION DES OP√âRATIONS ===

  private async withOperation<T>(operation: () => Promise<T>, defaultResult?: T): Promise<T> {
    if (this.isOperationInProgress) {
      console.warn('‚ö†Ô∏è Op√©ration ignor√©e - Une synchronisation est d√©j√† en cours');
      // Retourner un r√©sultat par d√©faut s√©curis√©
      if (defaultResult !== undefined) {
        return Promise.resolve(defaultResult);
      }
      // Pour les ImportResult, retourner une structure vide valide
      return Promise.resolve({ imported: 0, skipped: 0, errors: [], total: 0 } as any);
    }

    this.isOperationInProgress = true;
    try {
      return await operation();
    } finally {
      this.isOperationInProgress = false;
    }
  }

  // === MODE BATCH POUR OPTIMISATION ===
  
  enableBatchMode(): void {
    console.log('üîí BATCH MODE: Activation - Listeners d√©sactiv√©s');
    this.isBatchMode = true;
  }

  disableBatchMode(): void {
    console.log('üîì BATCH MODE: D√©sactivation - Listeners r√©activ√©s');
    this.isBatchMode = false;
  }

  isBatchModeActive(): boolean {
    return this.isBatchMode;
  }

  async withBatchMode<T>(operation: () => Promise<T>): Promise<T> {
    this.enableBatchMode();
    try {
      const result = await operation();
      // Recalcul unique des stats √† la fin
      await this.repository.notifyChange('bulk_update');
      return result;
    } finally {
      this.disableBatchMode();
    }
  }

  // === SCAN DU T√âL√âPHONE ===

  async scanPhoneContacts(): Promise<ScanResult> {
    return this.withOperation(async () => {
      console.log('üì± D√©l√©gation scan vers ContactsScanner...');
      
      const scanResult = await this.contactsScanner.scanPhoneContacts();
      
      // Sauvegarder les contacts dans le repository s'il y en a
      if (scanResult.contacts.length > 0) {
        await this.repository.addMany(scanResult.contacts);
        console.log(`‚úÖ ${scanResult.contacts.length} contacts ajout√©s au repository`);
      }
      
      return scanResult;
    });
  }

  // === IMPORT DANS LE R√âPERTOIRE BOB ===

  async importContactsToRepertoireUltraFast(identifiers: string[]): Promise<ImportResult> {
    return this.withOperation(async () => {
      console.log(`üöÄ ULTRA-FAST Import de ${identifiers.length} contacts...`);
      
      const contacts = await this.repository.getAllPhoneContacts();
      
      // Trouver les contacts √† importer
      const contactsToImport = identifiers.map(identifier => {
        return contacts.find(contact => {
          // Si c'est un t√©l√©phone (commence par +)
          if (identifier.startsWith('+')) {
            return contact.telephone === identifier;
          }
          // Si c'est un ID de contact
          return contact.id === identifier;
        });
      }).filter(Boolean); // Supprimer les undefined
      
      console.log(`üîç Contacts trouv√©s √† importer: ${contactsToImport.length}/${identifiers.length}`);
      
      if (contactsToImport.length === 0) {
        return { imported: 0, skipped: identifiers.length, errors: [], total: identifiers.length };
      }
      
      try {
        const token = await authService.getValidToken();
        if (!token) throw new Error('Token manquant');
        
        // üöÄ PR√âPARER TOUTES LES DONN√âES EN 1 FOIS
        const contactsData = contactsToImport.map(contact => ({
          nom: contact.nom || 'Contact',
          prenom: contact.prenom || '',
          telephone: contact.telephone || '',
          email: contact.email || null,
          source: 'import_repertoire'
        }));
        
        console.log(`üì§ Import ULTRA-RAPIDE de ${contactsData.length} contacts vers Strapi...`);
        const startTime = Date.now();
        
        // üöÄ UN SEUL APPEL API POUR TOUT !
        const createdContacts = await contactsService.createContactsBulkSingle(contactsData, token);
        
        const duration = Date.now() - startTime;
        console.log(`‚úÖ Import ULTRA-RAPIDE termin√© en ${duration}ms (${Math.round(contactsData.length / (duration / 1000))} contacts/sec)`);
        
        // üìù Mettre √† jour le cache local
        for (let i = 0; i < contactsToImport.length; i++) {
          const localContact = contactsToImport[i];
          const strapiContact = createdContacts[i];
          
          if (strapiContact) {
            const repertoireContact: Contact = {
              ...localContact,
              id: strapiContact.documentId || strapiContact.id,
              strapiId: strapiContact.id?.toString(),
              documentId: strapiContact.documentId,
              source: 'repertoire',
              dateImport: new Date().toISOString()
            };
            
            await this.repository.update(localContact.telephone, repertoireContact, true);
          }
        }
        
        // üíæ Sauvegarder le cache une seule fois
        await this.repository.forceSaveToCache();
        
        return {
          imported: createdContacts.length,
          skipped: identifiers.length - createdContacts.length,
          errors: [],
          total: identifiers.length
        };
        
      } catch (error) {
        console.error('‚ùå Erreur import ultra-fast:', error);
        
        // üîÑ FALLBACK: Utiliser l'ancienne m√©thode si l'API bulk √©choue
        console.log('üîÑ Fallback vers import par batches...');
        return await this.importContactsToRepertoire(identifiers);
      }
    });
  }

  async importContactsToRepertoire(identifiers: string[]): Promise<ImportResult> {
    return this.withOperation(async () => {
      console.log(`üì• Import de ${identifiers.length} contacts dans le r√©pertoire...`);
      
      const phoneContacts = await this.repository.getPhoneContacts();
      
      // üîß FIX: Support des IDs de contacts ET des t√©l√©phones
      const contactsToImport = phoneContacts.filter(contact => {
        return identifiers.some(identifier => {
          // Si c'est un t√©l√©phone (commence par +)
          if (identifier.startsWith('+')) {
            return contact.telephone === identifier;
          }
          // Si c'est un ID de contact
          return contact.id === identifier;
        });
      });
      
      console.log(`üîç Contacts trouv√©s √† importer: ${contactsToImport.length}/${identifiers.length}`);
      
      // üöÄ OPTIMISATION: Utiliser le batch mode pour √©viter les recalculs multiples
      return await this.withBatchMode(async () => {
        let imported = 0;
        let errors: string[] = [];

        for (const contact of contactsToImport) {
          try {
            // Convertir en contact r√©pertoire
            const repertoireContact: Contact = {
              ...contact,
              source: 'repertoire',
              aSurBob: undefined, // Sera d√©termin√© par la d√©tection Bob
              dateImport: new Date().toISOString()
            };

            await this.repository.update(contact.telephone, repertoireContact, true); // üöÄ skipCache = true
            imported++;

          } catch (error) {
            errors.push(`Erreur import ${contact.nom}: ${error.message}`);
          }
        }

        // üöÄ OPTIMISATION: Sauvegarder le cache une seule fois
        console.log('üíæ Sauvegarde batch du cache apr√®s import...');
        await this.repository.forceSaveToCache();
        console.log('‚úÖ Cache sauvegard√©');

        // üö´ D√âSACTIV√â TEMPORAIREMENT: Pas de sync automatique pour √©viter les conflits
        // La sync sera faite manuellement apr√®s tous les batches
        console.log('üîÑ Sync automatique d√©sactiv√©e - sera faite manuellement apr√®s import complet');

        return {
          imported,
          skipped: identifiers.length - imported,
          errors,
          total: identifiers.length
        };
      });
    });
  }

  // === SYNCHRONISATION STRAPI ===

  async syncToStrapi(contacts?: Contact[]): Promise<SyncResult> {
    if (this.isSyncBlocked) {
      console.warn('üö´ Synchronisation bloqu√©e');
      return { success: false, created: 0, updated: 0, failed: 0, errors: ['Synchronisation bloqu√©e'] };
    }

    return this.withOperation(async () => {
      const contactsToSync = contacts || await this.repository.getRepertoireContacts();
      console.log(`üîÑ D√©l√©gation sync vers ContactsSync: ${contactsToSync.length} contacts`);
      
      return await this.contactsSync.syncToStrapi(contactsToSync, {
        batchSize: CONTACTS_CONFIG.syncBatchSize,
        forceSync: false
      });
    });
  }


  private async syncToStrapiBackground(contacts: Contact[]): Promise<void> {
    try {
      await this.syncToStrapi(contacts);
      console.log(`‚úÖ Sync arri√®re-plan termin√©e: ${contacts.length} contacts`);
    } catch (error) {
      console.error('‚ùå Erreur sync arri√®re-plan:', error);
    }
  }

  // === INVITATIONS ===

  async inviteContact(telephoneOrId: string, method: 'sms' | 'whatsapp' = 'sms'): Promise<void> {
    console.log(`üîç ContactsManager.inviteContact - Recherche contact: ${telephoneOrId}`);
    
    // Essayer de trouver par t√©l√©phone d'abord
    let contact = await this.repository.getByPhone(telephoneOrId);
    
    // Si pas trouv√© et que √ßa ressemble √† un ID de t√©l√©phone, chercher par ID
    if (!contact && telephoneOrId.includes(':ABPerson')) {
      console.log(`üîÑ Recherche par ID de contact t√©l√©phone: ${telephoneOrId}`);
      const allContacts = await this.repository.getAll();
      contact = allContacts.find(c => c.id === telephoneOrId);
    }
    
    if (!contact) {
      console.error(`‚ùå Contact introuvable dans repository: ${telephoneOrId}`);
      throw new Error('Contact introuvable');
    }

    console.log(`‚úÖ Contact trouv√©:`, { nom: contact.nom, source: contact.source, id: contact.id });

    try {
      const token = await authService.getValidToken();
      if (!token) throw new Error('Token invalide');

      console.log(`üì§ Cr√©ation invitation Strapi pour: ${contact.nom}`);
      
      // Cr√©er invitation via API
      const invitation = await invitationsService.createInvitation({
        nom: contact.nom,
        telephone: contact.telephone,
        type: method
      }, token);

      console.log(`‚úÖ Invitation cr√©√©e sur Strapi:`, invitation);

      // Convertir le contact en contact invit√©
      const invitedContact: Contact = {
        ...contact,
        source: 'invited',
        invitation: {
          id: invitation.id,
          documentId: invitation.id, // invitationsService.createInvitation retourne juste l'id
          statut: invitation.statut,
          dateEnvoi: invitation.dateEnvoi,
          type: invitation.type
        },
        aSurBob: false,
        strapiId: invitation.id
      };

      console.log(`üíæ Mise √† jour repository - Contact invit√©:`, { 
        telephone, 
        source: invitedContact.source, 
        invitationId: invitedContact.invitation?.id 
      });

      await this.repository.update(telephone, invitedContact);
      
      console.log(`üì§ Invitation envoy√©e et sauvegard√©e: ${contact.nom}`);

      // üîß DIAGNOSTIC: V√©rifier que la mise √† jour a bien √©t√© effectu√©e
      const updatedContact = await this.repository.getByPhone(telephone);
      console.log(`üîç V√©rification apr√®s update:`, { 
        found: !!updatedContact,
        source: updatedContact?.source,
        hasInvitation: !!updatedContact?.invitation
      });

    } catch (error) {
      console.error(`‚ùå Erreur invitation ${contact.nom}:`, error);
      throw error;
    }
  }

  // === SUPPRESSION ===

  async deleteAllFromStrapi(): Promise<number> {
    if (this.isSyncBlocked) {
      console.warn('üö´ Suppression bloqu√©e - utilisez d√©bloquer d\'abord');
      return 0;
    }

    return this.withOperation(async () => {
      console.log('üßπ Suppression compl√®te Strapi...');
      
      const token = await authService.getValidToken();
      if (!token) throw new Error('Token invalide');

      let totalDeleted = 0;
      let page = 1;
      
      do {
        try {
          console.log(`üîç R√©cup√©ration page ${page} des contacts Strapi...`);
          const response = await apiClient.get(`/contacts?pagination[page]=${page}&pagination[pageSize]=500`, token);
          
          if (!response.ok) {
            break;
          }
          
          const responseData = await response.json();
          
          if (!responseData.data || !Array.isArray(responseData.data)) {
            break;
          }

          const contacts = responseData.data;
          console.log(`üìÑ Page ${page}: ${contacts.length} contacts trouv√©s`);

          if (contacts.length === 0) break;

          // Suppression par batches parall√®les
          const batches = this.createBatches(contacts, CONTACTS_CONFIG.deleteBatchSize);
          
          for (const batch of batches) {
            const deletePromises = batch.map(async (contact) => {
              try {
                const deleteResponse = await apiClient.delete(`/contacts/${contact.documentId || contact.id}`, token);
                return deleteResponse.ok;
              } catch (error) {
                console.warn(`‚ö†Ô∏è Erreur suppression ${contact.nom}:`, error);
                return false;
              }
            });

            const results = await Promise.all(deletePromises);
            const successCount = results.filter(r => r).length;
            totalDeleted += successCount;

            const pourcentage = responseData.meta?.pagination?.total 
              ? Math.round((totalDeleted / responseData.meta.pagination.total) * 100)
              : Math.round((totalDeleted / (totalDeleted + contacts.length - successCount)) * 100);

            console.log(`‚úÖ Batch supprim√©: ${successCount}/${batch.length} (Total: ${totalDeleted} - ${pourcentage}%)`);
            
            if (totalDeleted % 100 === 0) {
              const barre = '‚óè'.repeat(Math.floor(pourcentage / 5)) + '‚óã'.repeat(20 - Math.floor(pourcentage / 5));
              console.log(`üìä ${totalDeleted} contacts supprim√©s ${barre} ${pourcentage}%`);
            }
          }

          page++;
        } catch (error) {
          console.error(`‚ùå Erreur page ${page}:`, error);
          break;
        }
      } while (true);

      // Apr√®s suppression compl√®te, vider le cache local et bloquer sync
      if (totalDeleted > 0) {
        console.log('üîÑ Nettoyage local apr√®s suppression Strapi...');
        
        // Garder seulement les contacts t√©l√©phone
        const phoneContacts = await this.repository.getPhoneContacts();
        await this.repository.clear();
        await this.repository.addMany(phoneContacts);
        
        // Bloquer les sync automatiques
        this.isSyncBlocked = true;
        console.log('üö´ Synchronisation automatique BLOQU√âE apr√®s reset');
      }

      console.log(`üßπ NETTOYAGE TERMIN√â: ${totalDeleted} contacts supprim√©s de Strapi`);
      return totalDeleted;
    });
  }

  // === D√âTECTION UTILISATEURS BOB ===

  /**
   * Forcer la d√©tection Bob pour tous les contacts du r√©pertoire
   */
  async forceDetectBobUsers(): Promise<void> {
    console.log('üîÑ Force d√©tection utilisateurs Bob...');
    
    // D'abord, synchroniser les strapiId manquants pour am√©liorer la suppression
    try {
      await this.contactsSync.syncMissingStrapiIds();
    } catch (error) {
      console.warn('‚ö†Ô∏è Erreur sync strapiId:', error);
    }
    
    await this.detectBobUsers();
  }

  async detectBobUsers(contacts?: Contact[]): Promise<void> {
    // D'abord, synchroniser les strapiId manquants pour am√©liorer la suppression
    try {
      await this.contactsSync.syncMissingStrapiIds();
    } catch (error) {
      console.warn('‚ö†Ô∏è Erreur sync strapiId:', error);
    }
    
    const contactsToCheck = contacts || await this.repository.getRepertoireContacts();
    
    console.log(`üîé ContactsManager.detectBobUsers - D√©but avec ${contactsToCheck.length} contacts`);
    console.log(`üîç Contacts √† v√©rifier:`, contactsToCheck.map(c => `${c.nom} (${c.telephone})`));
    
    // üß™ DEBUG sp√©cial pour testbob
    const testbobContact = contactsToCheck.find(c => c.nom?.toLowerCase().includes('testbob'));
    if (testbobContact) {
      console.log(`üß™ DEBUG: testbob trouv√© dans les contacts √† v√©rifier:`, {
        nom: testbobContact.nom,
        telephone: testbobContact.telephone,
        source: testbobContact.source,
        aSurBob: testbobContact.aSurBob
      });
    } else {
      console.log(`üß™ DEBUG: testbob NOT FOUND dans les contacts √† v√©rifier`);
      console.log(`üß™ DEBUG: Noms des contacts:`, contactsToCheck.map(c => c.nom));
    }
    
    if (contactsToCheck.length === 0) {
      console.log('‚ùå Aucun contact √† v√©rifier pour Bob');
      return;
    }
    
    try {
      const result = await this.contactsSync.detectBobUsers(contactsToCheck);
      
      console.log(`üìä R√©sultat d√©tection:`, {
        totalChecked: result.totalChecked,
        bobFound: result.bobFound,
        errors: result.errors.length,
        bobUsers: Object.keys(result.bobUsers).length
      });
      
      // Mettre √† jour le repository avec les r√©sultats
      let updatedCount = 0;
      let promotedCount = 0;
      
      // Batch mode pour √©viter les recalculs multiples
      await this.withBatchMode(async () => {
        for (const contact of contactsToCheck) {
          const hasBob = result.bobUsers[contact.telephone];
          
          if (hasBob !== undefined && hasBob !== contact.aSurBob) {
            await this.repository.update(contact.telephone, { aSurBob: hasBob });
            updatedCount++;
          
            if (hasBob && contact.source === 'repertoire') {
              // Promouvoir en contact Bob
              const bobContact: Contact = {
                ...contact,
                source: 'bob',
                aSurBob: true,
                statut: 'ami'
              };
              await this.repository.update(contact.telephone, bobContact);
              promotedCount++;
            }
          }
        }
        
        if (updatedCount > 0) {
          console.log(`üîÑ Bob d√©tection: ${updatedCount} contacts mis √† jour, ${promotedCount} promus vers Bob`);
        }
      });
      
      console.log(`‚úÖ D√©tection Bob termin√©e: ${result.bobFound}/${result.totalChecked} utilisateurs Bob trouv√©s`);
      
    } catch (error) {
      console.error('‚ùå Erreur d√©tection Bob:', error);
      throw error; // Re-throw pour que l'erreur soit visible
    }
  }

  // === STATISTIQUES ===

  async getStats(): Promise<ContactsStats> {
    return this.repository.calculateStats();
  }

  // === GESTION DE LA SYNCHRONISATION ===

  blockSync(): void {
    this.isSyncBlocked = true;
    this.contactsSync.stopSync(); // Arr√™ter aussi le service de sync
    console.log('üö´ Synchronisation bloqu√©e');
  }

  unblockSync(): void {
    this.isSyncBlocked = false;
    this.contactsSync.resetCache(); // R√©initialiser le cache
    console.log('üîì Synchronisation d√©bloqu√©e');
  }

  isSyncBlockedStatus(): boolean {
    return this.isSyncBlocked || this.contactsSync.isSyncing();
  }

  // === NETTOYAGE ===

  async clearAllData(): Promise<void> {
    await this.repository.clearAllCache();
    
    // üöÄ FIX: Vider aussi le cache Strapi pour √©viter les contacts "ignor√©s" 
    this.contactsSync.resetCaches();
    console.log('üßπ Cache Strapi ContactsSync vid√©');
    
    this.isSyncBlocked = false;
    this.isOperationInProgress = false;
    console.log('üßπ Toutes les donn√©es contacts supprim√©es');
  }

  // === UTILITAIRES ===

  private normalizePhoneNumber(phone: string): string {
    if (!phone) return '';
    
    // Nettoyer le num√©ro - garder seulement les chiffres et le +
    let cleaned = phone.replace(/[^\d+]/g, '');
    
    // Si vide apr√®s nettoyage, retourner vide
    if (!cleaned) return '';
    
    // Supprimer les + multiples et garder seulement le premier
    cleaned = cleaned.replace(/\++/g, '+');
    
    // Si d√©j√† un num√©ro international (commence par +), le garder tel quel
    if (cleaned.startsWith('+')) {
      return cleaned;
    }
    
    // SEUL CAS S√õRE : Num√©ro fran√ßais 0XXXXXXXXX (10 chiffres commen√ßant par 0)
    if (cleaned.startsWith('0') && cleaned.length === 10) {
      // V√©rifier que c'est bien un num√©ro fran√ßais valide (01-09)
      const secondDigit = cleaned.charAt(1);
      if (['1', '2', '3', '4', '5', '6', '7', '8', '9'].includes(secondDigit)) {
        return '+33' + cleaned.substring(1);
      }
    }
    
    // Pour TOUS les autres cas : GARDER LE NUM√âRO ORIGINAL
    // Ne pas ajouter d'indicatif car on ne peut pas deviner le pays
    return cleaned;
  }

  private createBatches<T>(items: T[], batchSize: number): T[][] {
    const batches: T[][] = [];
    for (let i = 0; i < items.length; i += batchSize) {
      batches.push(items.slice(i, i + batchSize));
    }
    return batches;
  }

  private delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  // === SUPPRESSION D'UN CONTACT SP√âCIFIQUE ===

  /**
   * Supprimer un contact du r√©pertoire et le remettre comme contact phone si possible
   */
  async removeFromRepertoire(telephone: string): Promise<{ success: boolean; restoredAsPhone: boolean; error?: string }> {
    return this.withOperation(async () => {
      console.log(`üóëÔ∏è Suppression contact du r√©pertoire: ${telephone}`);
      
      try {
        // 1. R√©cup√©rer le contact √† supprimer
        const contact = await this.repository.getByPhone(telephone);
        if (!contact) {
          return { success: false, restoredAsPhone: false, error: 'Contact introuvable' };
        }

        console.log(`üîç Contact √† supprimer:`, { nom: contact.nom, source: contact.source });

        // 2. Supprimer de Strapi si n√©cessaire (m√©thode am√©lior√©e par t√©l√©phone)
        if (contact.source === 'repertoire' || contact.source === 'invited') {
          const token = await authService.getValidToken();
          if (token) {
            try {
              if (contact.source === 'invited' && contact.invitation?.documentId) {
                // Supprimer l'invitation de Strapi
                console.log(`üì§ Suppression invitation Strapi: ${contact.invitation.documentId}`);
                await apiClient.delete(`/invitations/${contact.invitation.documentId}`, token);
                console.log(`‚úÖ Invitation supprim√©e de Strapi`);
              } else {
                // Pour les contacts du r√©pertoire, utiliser le service contacts avec recherche par t√©l√©phone
                console.log(`üóëÔ∏è Suppression contact Strapi:`, { 
                  nom: contact.nom, 
                  telephone: contact.telephone, 
                  strapiId: contact.strapiId,
                  source: contact.source
                });
                
                try {
                  let deleted = false;
                  
                  // Strat√©gie 1: Utiliser l'ID direct si disponible
                  if (contact.strapiId) {
                    console.log(`üéØ Essai suppression par ID direct: ${contact.strapiId}`);
                    try {
                      await apiClient.delete(`/contacts/${contact.strapiId}`, token);
                      console.log(`‚úÖ Contact supprim√© de Strapi par ID direct`);
                      deleted = true;
                    } catch (deleteError) {
                      console.log(`‚ùå √âchec suppression par ID direct (${deleteError.status}):`, deleteError.message || deleteError);
                      if (deleteError.status !== 404) {
                        throw deleteError; // Re-lancer si ce n'est pas une erreur 404
                      }
                    }
                  }
                  
                  // Strat√©gie 2: Si l'ID direct a √©chou√© ou n'existe pas, rechercher par t√©l√©phone
                  if (!deleted) {
                    console.log(`üîç Recherche par t√©l√©phone: ${contact.telephone}`);
                    const contactsResponse = await apiClient.get(`/contacts?filters[telephone][$eq]=${encodeURIComponent(contact.telephone)}`, token);
                    
                    console.log(`üì° R√©ponse recherche:`, {
                      ok: contactsResponse.ok,
                      status: contactsResponse.status,
                      hasData: !!contactsResponse.data,
                      dataArray: !!contactsResponse.data?.data,
                      count: contactsResponse.data?.data?.length || 0
                    });
                    
                    if (contactsResponse.ok && contactsResponse.data?.data?.[0]) {
                      const strapiContact = contactsResponse.data.data[0];
                      const strapiId = strapiContact.documentId || strapiContact.id;
                      
                      console.log(`üìç Contact trouv√© dans Strapi:`, {
                        strapiId,
                        documentId: strapiContact.documentId,
                        id: strapiContact.id,
                        nom: strapiContact.nom
                      });
                      
                      await apiClient.delete(`/contacts/${strapiId}`, token);
                      console.log(`‚úÖ Contact supprim√© de Strapi apr√®s recherche par t√©l√©phone`);
                      deleted = true;
                    } else {
                      console.log(`‚ÑπÔ∏è Contact introuvable dans Strapi par t√©l√©phone - peut-√™tre d√©j√† supprim√©`);
                    }
                  }
                  
                  if (!deleted) {
                    console.log(`‚ö†Ô∏è Contact non trouv√© dans Strapi mais poursuite de la suppression locale`);
                  }
                  
                } catch (deleteError) {
                  console.error(`‚ùå Erreur suppression Strapi:`, {
                    message: deleteError.message || deleteError,
                    status: deleteError.status,
                    telephone: contact.telephone,
                    strapiId: contact.strapiId
                  });
                  // Continue quand m√™me avec la suppression locale
                }
              }
            } catch (strapiError) {
              if (strapiError.status === 404) {
                console.log(`‚ÑπÔ∏è Contact d√©j√† supprim√© de Strapi ou introuvable (404 - normal)`);
              } else {
                console.warn(`‚ö†Ô∏è Erreur suppression Strapi:`, strapiError);
              }
              // Continue quand m√™me avec la suppression locale
            }
          }
        }

        // 3. V√©rifier si le contact existe encore dans le t√©l√©phone
        const scanResult = await this.contactsScanner.scanPhoneContacts();
        const stillInPhone = scanResult.contacts.find(phoneContact => 
          this.normalizePhoneNumber(phoneContact.telephone) === this.normalizePhoneNumber(telephone)
        );

        let restoredAsPhone = false;

        if (stillInPhone) {
          // 4a. Le contact existe encore dans le t√©l√©phone -> le remettre comme contact phone
          console.log(`üì± Contact trouv√© dans le t√©l√©phone, restauration comme contact phone`);
          
          const phoneContact: Contact = {
            ...stillInPhone,
            source: 'phone',
            aSurBob: false,
            invitation: undefined, // ‚úÖ Nettoyer l'invitation
            strapiId: undefined,   // ‚úÖ Nettoyer l'ID Strapi
            estInvite: false,      // ‚úÖ R√©initialiser le statut d'invitation
            dateAjout: stillInPhone.dateAjout || new Date().toISOString()
          };

          await this.repository.update(telephone, phoneContact);
          restoredAsPhone = true;
          
          console.log(`‚úÖ Contact restaur√© comme contact phone PROPRE (sans invitation): ${phoneContact.nom}`);
        } else {
          // 4b. Le contact n'existe plus dans le t√©l√©phone -> suppression compl√®te
          console.log(`üì± Contact non trouv√© dans le t√©l√©phone, suppression compl√®te`);
          await this.repository.remove(telephone);
        }

        console.log(`‚úÖ Suppression du r√©pertoire termin√©e: ${contact.nom}`);
        return { success: true, restoredAsPhone };

      } catch (error) {
        console.error(`‚ùå Erreur suppression contact:`, error);
        return { success: false, restoredAsPhone: false, error: (error as Error).message };
      }
    });
  }

  // === R√âPARATION DU CACHE ===

  /**
   * R√©parer le cache en rescannant le t√©l√©phone et en restaurant les contacts phone
   */
  async repairPhoneContactsCache(): Promise<{ restored: number; errors: string[] }> {
    return this.withOperation(async () => {
      console.log('üîß R√âPARATION: Rescan complet du t√©l√©phone...');
      
      try {
        // 1. Scanner tous les contacts du t√©l√©phone
        const scanResult = await this.contactsScanner.scanPhoneContacts();
        
        if (!scanResult.hasPermission || scanResult.contacts.length === 0) {
          return {
            restored: 0,
            errors: scanResult.errors.length > 0 ? scanResult.errors : ['Aucun contact trouv√© dans le t√©l√©phone']
          };
        }

        console.log(`üì± ${scanResult.contacts.length} contacts trouv√©s dans le t√©l√©phone`);

        // 2. R√©cup√©rer les contacts actuels du repository
        const currentContacts = await this.repository.getAll();
        const currentByPhone = new Map(currentContacts.map(c => [c.telephone, c]));

        console.log(`üíæ ${currentContacts.length} contacts actuels dans le repository`);

        // 3. Identifier les contacts qui doivent √™tre restaur√©s comme contacts phone
        let restored = 0;
        const errors: string[] = [];

        for (const phoneContact of scanResult.contacts) {
          const existing = currentByPhone.get(phoneContact.telephone);
          
          if (!existing) {
            // Contact n'existe pas du tout -> l'ajouter comme contact phone
            try {
              await this.repository.add(phoneContact);
              restored++;
              console.log(`‚ûï Contact phone ajout√©: ${phoneContact.nom}`);
            } catch (error) {
              console.warn(`‚ö†Ô∏è Erreur ajout ${phoneContact.nom}:`, error);
              errors.push(`Erreur ajout ${phoneContact.nom}: ${error.message}`);
            }
          } else if (existing.source === 'invited' || existing.source === 'repertoire') {
            // Contact existe mais pas comme phone -> ignorer (ne pas √©craser)
            console.log(`‚è≠Ô∏è Contact ${phoneContact.nom} existe d√©j√† comme ${existing.source}, ignor√©`);
          }
          // Si c'est d√©j√† un contact phone ou bob, on le laisse tel quel
        }

        console.log(`‚úÖ R√©paration termin√©e: ${restored} contacts phone restaur√©s`);

        return { restored, errors };

      } catch (error) {
        console.error('‚ùå Erreur lors de la r√©paration du cache:', error);
        return { 
          restored: 0, 
          errors: [error.message || 'Erreur inconnue lors de la r√©paration'] 
        };
      }
    });
  }

  /**
   * Forcer la cr√©ation de contacts phone manquants (sans √©craser le repertoire)
   */
  async ensureMissingPhoneContacts(): Promise<{ added: number; errors: string[] }> {
    return this.withOperation(async () => {
      console.log('üîç V√âRIFICATION: Contacts phone manquants...');
      
      try {
        // 1. Scanner le t√©l√©phone
        const scanResult = await this.contactsScanner.scanPhoneContacts();
        if (!scanResult.hasPermission || scanResult.contacts.length === 0) {
          return { added: 0, errors: ['Pas d\'acc√®s aux contacts du t√©l√©phone'] };
        }

        // 2. R√©cup√©rer les contacts existants
        const existingContacts = await this.repository.getAll();
        const existingPhones = new Set(existingContacts.map(c => c.telephone));

        // 3. Identifier les contacts manquants
        const missingContacts = scanResult.contacts.filter(phoneContact => 
          !existingPhones.has(phoneContact.telephone)
        );

        console.log(`üì± ${missingContacts.length} contacts phone manquants d√©tect√©s sur ${scanResult.contacts.length} total`);

        // 4. Ajouter les contacts manquants
        if (missingContacts.length > 0) {
          await this.repository.addMany(missingContacts);
          console.log(`‚úÖ ${missingContacts.length} contacts phone ajout√©s au repository`);
        }

        return { added: missingContacts.length, errors: [] };

      } catch (error) {
        console.error('‚ùå Erreur v√©rification contacts phone:', error);
        return { added: 0, errors: [error.message || 'Erreur inconnue'] };
      }
    });
  }

  // === API DE HAUT NIVEAU ===

  async importAllPhoneContacts(): Promise<ImportResult> {
    // 1. Scanner le t√©l√©phone
    const scanResult = await this.scanPhoneContacts();
    if (!scanResult.hasPermission || scanResult.contacts.length === 0) {
      return {
        imported: 0,
        skipped: 0,
        errors: scanResult.errors,
        total: 0
      };
    }

    // 2. Importer tous dans le r√©pertoire
    const telephones = scanResult.contacts.map(c => c.telephone);
    const importResult = await this.importContactsToRepertoire(telephones);

    // 3. D√©tecter utilisateurs Bob
    if (importResult.imported > 0) {
      this.detectBobUsers().catch(error => {
        console.warn('‚ö†Ô∏è D√©tection Bob √©chou√©e:', error);
      });
    }

    return importResult;
  }

  // === DEBUG ===

  async getDebugInfo(): Promise<any> {
    const repositoryInfo = await this.repository.getDebugInfo();
    const stats = await this.getStats();
    
    return {
      ...repositoryInfo,
      stats,
      isSyncBlocked: this.isSyncBlocked,
      isOperationInProgress: this.isOperationInProgress,
      config: CONTACTS_CONFIG
    };
  }
}