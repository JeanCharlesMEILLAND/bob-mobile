// src/hooks/contacts/useContactsActions.ts - Hook pour toutes les actions sur les contacts

import { useCallback, useMemo } from 'react';
import { ContactsManager } from '../../services/contacts/ContactsManager';
import { Contact, ImportResult, SyncResult } from '../../types/contacts.unified';
import { useNotifications } from '../../components/common/SmartNotifications';

export interface UseContactsActionsReturn {
  // Actions principales
  scanPhoneContacts: () => Promise<ImportResult>;
  importAllContacts: () => Promise<ImportResult>;
  importSelectedContacts: (identifiers: string[], options?: { silent?: boolean, onComplete?: () => Promise<void> }) => Promise<ImportResult>;
  inviteContact: (telephone: string, method?: 'sms' | 'whatsapp') => Promise<void>;
  removeContact: (identifier: string) => Promise<void>;
  
  // Synchronisation
  syncToStrapi: (contacts?: Contact[]) => Promise<SyncResult>;
  detectBobUsers: (contacts?: Contact[]) => Promise<void>;
  
  // Nettoyage et maintenance
  deleteAllFromStrapi: () => Promise<number>;
  clearAllData: () => Promise<void>;
  blockSync: () => void;
  unblockSync: () => void;
  
  // √âtats
  isSyncBlocked: boolean;
  
  // Utilitaires
  refreshData: () => Promise<void>;
  getDebugInfo: () => Promise<any>;
}

export const useContactsActions = (): UseContactsActionsReturn => {
  const manager = useMemo(() => ContactsManager.getInstance(), []);
  const notifications = useNotifications();

  // === ACTIONS PRINCIPALES ===

  const scanPhoneContacts = useCallback(async (): Promise<ImportResult> => {
    try {
      console.log('üì± Action: Scan du t√©l√©phone...');
      const result = await manager.scanPhoneContacts();
      console.log(`‚úÖ Scan termin√©: ${result.total} contacts trouv√©s`);
      return {
        imported: result.total,
        skipped: 0,
        errors: result.errors,
        total: result.total
      };
    } catch (error) {
      console.error('‚ùå Erreur scan t√©l√©phone:', error);
      return {
        imported: 0,
        skipped: 0,
        errors: [(error as Error).message],
        total: 0
      };
    }
  }, [manager]);

  const importAllContacts = useCallback(async (): Promise<ImportResult> => {
    try {
      console.log('üì• Action: Import complet...');
      return await manager.importAllPhoneContacts();
    } catch (error) {
      console.error('‚ùå Erreur import complet:', error);
      return {
        imported: 0,
        skipped: 0,
        errors: [(error as Error).message],
        total: 0
      };
    }
  }, [manager]);

  const importSelectedContacts = useCallback(async (identifiers: string[], options?: { silent?: boolean, onComplete?: () => Promise<void>, onProgress?: (current: number, total: number) => void }): Promise<ImportResult> => {
    try {
      console.log(`üì• Action: Import s√©lectif de ${identifiers.length} contacts...`);
      
      // üöÄ ULTRA-RAPIDE: Si plus de 500 contacts, utiliser l'import bulk en 1 seul appel
      if (identifiers.length >= 500) {
        console.log(`üöÄ ULTRA-RAPIDE activ√©: Import de ${identifiers.length} contacts en 1 seul appel !`);
        
        try {
          const startTime = Date.now();
          
          // Callback de progression au d√©but
          if (options?.onProgress) {
            options.onProgress(0, identifiers.length);
          }
          
          // üöÄ UN SEUL APPEL POUR TOUT !
          const result = await manager.importContactsToRepertoireUltraFast(identifiers);
          
          const duration = Date.now() - startTime;
          console.log(`‚úÖ Import ULTRA-RAPIDE termin√© en ${duration}ms (${Math.round(identifiers.length / (duration / 1000))} contacts/sec)`);
          
          // Callback de progression √† la fin
          if (options?.onProgress) {
            options.onProgress(identifiers.length, identifiers.length);
          }
          
          // Notification de succ√®s
          if (!options?.silent) {
            notifications.success(
              'üöÄ Import ULTRA-RAPIDE termin√© !',
              `${result.imported} contacts import√©s en ${Math.round(duration / 1000)}s`,
              { 
                category: 'contact_import',
                duration: 4000
              }
            );
          }
          
          // Callback de fin
          if (options?.onComplete) {
            try {
              await options.onComplete();
            } catch (error) {
              console.warn('‚ö†Ô∏è Erreur callback onComplete:', error);
            }
          }
          
          return result;
          
        } catch (error) {
          console.warn('‚ö†Ô∏è Import ultra-rapide √©chou√©, fallback vers batches:', error);
          // Continuer avec l'ancienne m√©thode si √ßa √©choue
        }
      }
      
      // üöÄ OPTIMISATION: Batches beaucoup plus gros pour les imports normaux
      let BATCH_SIZE = Math.min(2000, Math.max(1000, Math.floor(identifiers.length / 2))); // Adaptatif: 1000-2000 selon volume
      console.log(`üì¶ Taille de batch calcul√©e: ${BATCH_SIZE} (pour ${identifiers.length} contacts)`);
      const totalBatches = Math.ceil(identifiers.length / BATCH_SIZE);
      let totalImported = 0;
      let totalSkipped = 0;
      let totalErrors: string[] = [];
      
      console.log(`üì¶ Import par batches: ~${totalBatches} batches de taille adaptative`);
      
      let processedCount = 0;
      let batchIndex = 0;
      
      while (processedCount < identifiers.length) {
        const remainingCount = identifiers.length - processedCount;
        const currentBatchSize = Math.min(BATCH_SIZE, remainingCount);
        const batchIds = identifiers.slice(processedCount, processedCount + currentBatchSize);
        
        console.log(`üì¶ Batch ${batchIndex + 1}: Traitement ${currentBatchSize} contacts (${processedCount + 1} √† ${processedCount + currentBatchSize})`);
        
        const batchStart = Date.now();
        try {
          // üöÄ UTILISER L'IMPORT ULTRA-RAPIDE pour les tr√®s gros batches
          const batchResult = currentBatchSize >= 1000 
            ? await manager.importContactsToRepertoireUltraFast(batchIds)
            : await manager.importContactsToRepertoire(batchIds);
          const batchDuration = Date.now() - batchStart;
          
          // üö® S√âCURIT√â: V√©rifier que le r√©sultat n'est pas null/undefined
          if (!batchResult) {
            console.warn(`‚ö†Ô∏è Batch ${batchIndex + 1} ignor√© (op√©ration en cours)`);
            // ‚úÖ IMPORTANT: Mettre √† jour la progression m√™me si batch ignor√©
            processedCount += currentBatchSize;
            if (options?.onProgress) {
              options.onProgress(processedCount, identifiers.length);
            }
            // Attendre un peu avant le prochain batch
            await new Promise(resolve => setTimeout(resolve, 2000));
            continue; // Passer au batch suivant
          }
          
          // üìä Adaptation dynamique de la taille selon la performance - SEUILS TR√àS √âLEV√âS
          if (batchDuration < 10000 && BATCH_SIZE < 3000) { // Si < 10s et taille < 3000
            BATCH_SIZE = Math.min(3000, Math.floor(BATCH_SIZE * 2)); // Doubler si tr√®s rapide
            console.log(`üöÄ Batch tr√®s rapide (${batchDuration}ms), doublement taille √† ${BATCH_SIZE}`);
          } else if (batchDuration > 45000 && BATCH_SIZE > 200) { // Si > 45s et taille > 200
            BATCH_SIZE = Math.max(200, Math.floor(BATCH_SIZE * 0.6)); // R√©duire de 40%
            console.log(`üêå Batch lent (${batchDuration}ms), r√©duction taille √† ${BATCH_SIZE}`);
          }
          
          totalImported += batchResult.imported || 0;
          totalSkipped += batchResult.skipped || 0;
          totalErrors = [...totalErrors, ...(batchResult.errors || [])];
          
          processedCount += currentBatchSize;
          
          // üìä Callback de progression
          if (options?.onProgress) {
            options.onProgress(processedCount, identifiers.length);
          }
          
          console.log(`‚úÖ Batch ${batchIndex + 1} termin√©: +${batchResult.imported || 0} import√©s, +${batchResult.skipped || 0} ignor√©s (${batchDuration}ms)`);
          
          // üîÑ Petit d√©lai entre les batches (adaptatif selon la performance)
          if (processedCount < identifiers.length) { 
            const delayMs = batchDuration > 15000 ? 1000 : 300; // Plus de d√©lai si batch lent
            await new Promise(resolve => setTimeout(resolve, delayMs));
          }
          
        } catch (batchError) {
          console.error(`‚ùå Erreur batch ${batchIndex + 1}:`, batchError);
          totalErrors.push(`Batch ${batchIndex + 1}: ${(batchError as Error).message}`);
          
          // ‚úÖ IMPORTANT: Mettre √† jour la progression m√™me en cas d'erreur
          processedCount += currentBatchSize;
          if (options?.onProgress) {
            options.onProgress(processedCount, identifiers.length);
          }
        }
        
        batchIndex++;
      }
      
      const result = {
        imported: totalImported,
        skipped: totalSkipped,
        errors: totalErrors,
        total: identifiers.length
      };
      
      // Notifications seulement si pas en mode silencieux
      if (!options?.silent) {
        // Notification de succ√®s bas√©e sur les r√©sultats
        if (result.imported > 0) {
          notifications.success(
            'Contacts import√©s',
            `${result.imported} contact${result.imported > 1 ? 's' : ''} ajout√©${result.imported > 1 ? 's' : ''} √† votre r√©pertoire`,
            { 
              category: 'contact_import',
              duration: 3000
            }
          );
        }
        
        // Notification d'avertissement si des contacts ont √©t√© ignor√©s
        if (result.skipped > 0) {
          notifications.warning(
            'Contacts ignor√©s',
            `${result.skipped} contact${result.skipped > 1 ? 's' : ''} d√©j√† pr√©sent${result.skipped > 1 ? 's' : ''}`,
            { 
              category: 'contact_import',
              duration: 2000
            }
          );
        }
      }
      
      // Callback optionnel pour mettre √† jour les stats
      if (options?.onComplete) {
        try {
          await options.onComplete();
        } catch (error) {
          console.warn('‚ö†Ô∏è Erreur callback onComplete:', error);
        }
      }
      
      return result;
    } catch (error) {
      console.error('‚ùå Erreur import s√©lectif:', error);
      
      // Notification d'erreur
      notifications.error(
        'Erreur d\'importation',
        `Impossible d'importer les contacts s√©lectionn√©s`,
        {
          category: 'contact_import',
          duration: 4000,
          action: {
            label: 'R√©essayer',
            onPress: () => importSelectedContacts(identifiers)
          }
        }
      );
      
      return {
        imported: 0,
        skipped: identifiers.length,
        errors: [(error as Error).message],
        total: identifiers.length
      };
    }
  }, [manager, notifications]);

  const inviteContact = useCallback(async (telephone: string, method: 'sms' | 'whatsapp' = 'sms'): Promise<void> => {
    try {
      console.log(`üì§ Action: Invitation contact ${telephone}...`);
      await manager.inviteContact(telephone, method);
      console.log(`‚úÖ Invitation envoy√©e: ${telephone}`);
      
      // Notification de succ√®s
      notifications.success(
        'Invitation envoy√©e',
        `Invitation Bob envoy√©e au ${telephone}`,
        { 
          category: 'invitation',
          duration: 3000
        }
      );
      
    } catch (error) {
      console.error(`‚ùå Erreur invitation ${telephone}:`, error);
      
      // Notification d'erreur
      notifications.error(
        'Erreur d\'invitation',
        `Impossible d'envoyer l'invitation au ${telephone}`,
        {
          category: 'invitation',
          duration: 4000,
          action: {
            label: 'R√©essayer',
            onPress: () => inviteContact(telephone, method)
          }
        }
      );
      
      throw error;
    }
  }, [manager, notifications]);

  const removeContact = useCallback(async (identifier: string): Promise<void> => {
    try {
      console.log(`üóëÔ∏è Action: Suppression contact ${identifier}...`);
      
      // üîß FIX: Identifier peut √™tre soit un ID, soit un t√©l√©phone
      let contact = null;
      
      // D'abord essayer par t√©l√©phone (si √ßa ressemble √† un num√©ro)
      if (identifier.startsWith('+') || /^\d+$/.test(identifier)) {
        contact = await manager.repository.getByPhone(identifier);
        console.log(`üîç Recherche par t√©l√©phone: ${contact ? 'trouv√©' : 'non trouv√©'}`);
      }
      
      // Si pas trouv√©, essayer par ID
      if (!contact) {
        const allContacts = await manager.repository.getAll();
        contact = allContacts.find(c => c.id === identifier);
        console.log(`üîç Recherche par ID: ${contact ? 'trouv√©' : 'non trouv√©'}`);
      }
      
      if (!contact) {
        console.warn(`‚ö†Ô∏è Contact ${identifier} introuvable (ni par t√©l√©phone ni par ID)`);
        return;
      }

      console.log(`üìã Contact trouv√©:`, {
        nom: contact.nom,
        telephone: contact.telephone,
        source: contact.source,
        id: contact.id,
        strapiId: contact.strapiId,
        documentId: (contact as any).documentId,
        hasStrapiId: !!contact.strapiId,
        syncBlocked: manager.isSyncBlockedStatus()
      });

      // 1. Supprimer de Strapi si n√©cessaire (m√™me sans strapiId local, on essaie via t√©l√©phone)
      if (!manager.isSyncBlockedStatus()) {
        try {
          // Import des services n√©cessaires  
          const { apiClient } = await import('../../services/api');
          const { authService } = await import('../../services/auth.service');
          const token = await authService.getValidToken();
          
          if (!token) {
            console.warn('‚ö†Ô∏è Pas de token pour suppression Strapi');
            return;
          }
          
          // üîß FIX Strapi v5: R√©cup√©rer le vrai documentId depuis Strapi (comme suppression en masse)
          let realDocumentId = null;
          let strapiContact = null;
          
          try {
            // 1. Rechercher le contact sur Strapi par t√©l√©phone pour obtenir son vrai documentId
            console.log(`üîç Recherche du contact sur Strapi par t√©l√©phone: ${contact.telephone}`);
            
            // Essayer plusieurs variantes du t√©l√©phone
            const phoneVariants = [
              contact.telephone,
              contact.telephone?.replace(/\s/g, ''), // Sans espaces
              contact.telephone?.replace(/[^\d+]/g, ''), // Seulement + et chiffres
              contact.telephone?.replace(/[\s\-\.()]/g, ''), // Sans espaces, tirets, points, parenth√®ses
              // Variantes fran√ßaises
              contact.telephone?.replace(/^(\+33)/, '0'), // +33 -> 0
              contact.telephone?.replace(/^0/, '+33'), // 0 -> +33
              // Variantes g√©n√©riques (enlever le +)
              contact.telephone?.replace(/^\+/, ''), // +48531151108 -> 48531151108
              // Variantes avec 00 au lieu de +
              contact.telephone?.replace(/^\+/, '00'), // +48531151108 -> 0048531151108
            ].filter((phone, index, arr) => phone && phone.length > 5 && arr.indexOf(phone) === index); // Filtrer et d√©dupliquer
            
            console.log(`üîç Variants g√©n√©r√©s:`, phoneVariants);
            
            for (const phoneVariant of phoneVariants) {
              console.log(`üîç Tentative recherche avec: ${phoneVariant}`);
              const searchResponse = await apiClient.get(`/contacts?filters[telephone][$eq]=${encodeURIComponent(phoneVariant)}`, token);
              
              if (searchResponse.ok) {
                const searchData = await searchResponse.json();
                strapiContact = searchData.data?.[0];
                if (strapiContact) {
                  console.log(`‚úÖ Contact trouv√© avec variant: ${phoneVariant}`);
                  break;
                }
              }
            }
            
            if (strapiContact) {
              realDocumentId = strapiContact.documentId || strapiContact.id;
              console.log(`‚úÖ Contact trouv√© sur Strapi:`, {
                nom: strapiContact.nom,
                documentId: strapiContact.documentId,
                id: strapiContact.id,
                realDocumentId: realDocumentId
              });
            } else {
              // Fallback: rechercher par nom si t√©l√©phone √©choue
              console.log(`üîç Fallback: recherche par nom: ${contact.nom}`);
              try {
                // Essayer plusieurs approches de recherche par nom
                const nameSearches = [
                  `/contacts?filters[nom][$containsi]=${encodeURIComponent(contact.nom)}`,
                  `/contacts?filters[prenom][$containsi]=${encodeURIComponent(contact.nom)}`,
                  // Chercher par nom complet (nom + prenom)
                  `/contacts?filters[$or][0][nom][$containsi]=${encodeURIComponent(contact.nom.split(' ')[0])}&filters[$or][1][prenom][$containsi]=${encodeURIComponent(contact.nom.split(' ')[1] || '')}`,
                ];
                
                for (const searchUrl of nameSearches) {
                  console.log(`üîç Recherche par nom avec: ${searchUrl}`);
                  const nameSearchResponse = await apiClient.get(searchUrl, token);
                  
                  if (nameSearchResponse.ok) {
                    const nameSearchData = await nameSearchResponse.json();
                    console.log(`üìä R√©sultats recherche nom: ${nameSearchData.data?.length || 0} contacts trouv√©s`);
                    
                    // Chercher une correspondance exacte ou proche
                    strapiContact = nameSearchData.data?.find((c: any) => {
                      const fullNameLocal = contact.nom?.toLowerCase();
                      const fullNameStrapi1 = (c.nom + ' ' + c.prenom)?.toLowerCase();
                      const fullNameStrapi2 = (c.prenom + ' ' + c.nom)?.toLowerCase();
                      
                      return c.nom?.toLowerCase() === fullNameLocal ||
                             c.prenom?.toLowerCase() === fullNameLocal ||
                             fullNameStrapi1 === fullNameLocal ||
                             fullNameStrapi2 === fullNameLocal ||
                             fullNameLocal?.includes(c.nom?.toLowerCase()) ||
                             fullNameLocal?.includes(c.prenom?.toLowerCase());
                    });
                    
                    if (strapiContact) {
                      realDocumentId = strapiContact.documentId || strapiContact.id;
                      console.log(`‚úÖ Contact trouv√© par nom sur Strapi:`, {
                        nom: strapiContact.nom,
                        prenom: strapiContact.prenom,
                        telephone: strapiContact.telephone,
                        documentId: strapiContact.documentId,
                        realDocumentId: realDocumentId
                      });
                      break; // Sortir de la boucle si trouv√©
                    }
                  }
                }
              } catch (nameError) {
                console.warn('‚ö†Ô∏è Erreur recherche par nom:', nameError);
              }
              
              if (!strapiContact) {
                console.log(`‚ÑπÔ∏è Contact introuvable sur Strapi (t√©l√©phone ET nom), tentative avec ID local`);
                // En dernier recours, essayer avec l'ID local
                realDocumentId = (contact as any).documentId || contact.strapiId || contact.id;
                console.log(`‚ö†Ô∏è Utilisation ID local comme fallback: ${realDocumentId}`);
              }
            }
            
          } catch (searchError) {
            console.warn(`‚ö†Ô∏è Erreur recherche contact:`, searchError);
            realDocumentId = (contact as any).documentId || contact.strapiId || contact.id;
          }
          
          console.log(`üîó Tentative suppression Strapi v5:`, {
            contactLocal: contact.nom,
            localId: contact.id,
            strapiId: contact.strapiId, 
            documentId: (contact as any).documentId,
            realDocumentId: realDocumentId,
            telephone: contact.telephone
          });
          
          console.log(`üåê API DELETE: /contacts/${realDocumentId}`);
          const response = await apiClient.delete(`/contacts/${realDocumentId}`, token);
          
          console.log(`üìä R√©ponse DELETE compl√®te:`, {
            url: `/contacts/${realDocumentId}`,
            status: response.status,
            statusText: response.statusText,
            ok: response.ok,
            headers: response.headers
          });
          
          if (response.ok) {
            console.log(`‚úÖ Contact supprim√© de Strapi: ${contact.nom}`);
            
            // üîç V√âRIFICATION: Relancer une recherche pour confirmer la suppression
            setTimeout(async () => {
              try {
                const verifyResponse = await apiClient.get('/contacts?pagination[limit]=100', token);
                if (verifyResponse.ok) {
                  const verifyData = await verifyResponse.json();
                  const stillExists = verifyData.data.find((sc: any) => sc.telephone === contact.telephone);
                  
                  if (stillExists) {
                    console.warn(`üö® PROBL√àME: Contact ${contact.nom} existe toujours dans Strapi apr√®s suppression!`, stillExists);
                  } else {
                    console.log(`‚úÖ CONFIRM√â: Contact ${contact.nom} bien supprim√© de Strapi`);
                  }
                }
              } catch (error) {
                console.error('‚ùå Erreur v√©rification suppression:', error);
              }
            }, 2000); // Attendre 2s pour √©viter probl√®mes de cache
            
          } else {
            console.warn(`‚ö†Ô∏è √âchec suppression Strapi ${response.status}: ${contact.nom}`);
            
            // Lire le body de l'erreur pour plus d'infos
            try {
              const errorBody = await response.text();
              console.error(`üìã D√©tails erreur Strapi:`, errorBody);
              
              // Si 404 et on avait un vrai documentId, c'est √©trange
              if (response.status === 404) {
                if (strapiContact) {
                  console.warn(`üö® Contact √©tait trouv√© sur Strapi mais suppression 404 - cache d√©synchronis√©?`);
                } else {
                  console.log(`‚ÑπÔ∏è 404 avec ID local - contact probablement d√©j√† supprim√©`);
                }
              }
            } catch (e) {
              console.warn('Impossible de lire le body de l\'erreur');
            }
          }
        } catch (strapiError) {
          console.warn(`‚ö†Ô∏è Erreur suppression Strapi pour ${contact.nom}:`, strapiError);
        }
      } else {
        console.log(`üîç Suppression Strapi ignor√©e:`, {
          reason: 'Sync bloqu√©e', 
          strapiId: contact.strapiId,
          syncBlocked: manager.isSyncBlockedStatus()
        });
      }

      // 2. Supprimer localement
      await manager.repository.remove(contact.telephone);
      console.log(`‚úÖ Contact supprim√© localement: ${contact.nom}`);

      // 3. Notification de succ√®s
      notifications.success(
        'Contact supprim√©',
        `${contact.nom} a √©t√© retir√© de votre r√©pertoire Bob`,
        { 
          category: 'contact_deletion',
          duration: 3000
        }
      );

    } catch (error) {
      console.error(`‚ùå Erreur suppression ${identifier}:`, error);
      
      // Notification d'erreur
      notifications.error(
        'Erreur de suppression',
        `Impossible de supprimer ${contact?.nom || identifier}. Veuillez r√©essayer.`,
        {
          category: 'contact_deletion',
          duration: 5000,
          action: {
            label: 'R√©essayer',
            onPress: () => removeContact(identifier)
          }
        }
      );
      
      throw error;
    }
  }, [manager, notifications]);

  // === SYNCHRONISATION ===

  const syncToStrapi = useCallback(async (contacts?: Contact[]): Promise<SyncResult> => {
    try {
      console.log('üîÑ Action: Synchronisation Strapi...');
      return await manager.syncToStrapi(contacts);
    } catch (error) {
      console.error('‚ùå Erreur sync Strapi:', error);
      return {
        success: false,
        created: 0,
        updated: 0,
        failed: 0,
        errors: [(error as Error).message]
      };
    }
  }, [manager]);

  const detectBobUsers = useCallback(async (contacts?: Contact[]): Promise<void> => {
    try {
      console.log('üîé Action: D√©tection utilisateurs Bob...');
      await manager.detectBobUsers(contacts);
      console.log('‚úÖ D√©tection Bob termin√©e');
    } catch (error) {
      console.error('‚ùå Erreur d√©tection Bob:', error);
      throw error;
    }
  }, [manager]);

  // === NETTOYAGE ET MAINTENANCE ===

  const deleteAllFromStrapi = useCallback(async (): Promise<number> => {
    try {
      console.log('üßπ Action: Suppression compl√®te Strapi...');
      return await manager.deleteAllFromStrapi();
    } catch (error) {
      console.error('‚ùå Erreur suppression Strapi:', error);
      throw error;
    }
  }, [manager]);

  const clearAllData = useCallback(async (): Promise<void> => {
    try {
      console.log('üßπ Action: Nettoyage complet...');
      await manager.clearAllData();
      console.log('‚úÖ Nettoyage complet termin√©');
    } catch (error) {
      console.error('‚ùå Erreur nettoyage:', error);
      throw error;
    }
  }, [manager]);

  const blockSync = useCallback(() => {
    console.log('üö´ Action: Blocage synchronisation...');
    manager.blockSync();
  }, [manager]);

  const unblockSync = useCallback(() => {
    console.log('üîì Action: D√©blocage synchronisation...');
    manager.unblockSync();
  }, [manager]);

  // === UTILITAIRES ===

  const refreshData = useCallback(async (): Promise<void> => {
    try {
      console.log('üîÑ Action: Rafra√Æchissement des donn√©es...');
      // Forcer le rechargement des donn√©es depuis le cache sans vider
      // Les observers se chargeront de notifier les composants
      await manager.repository.ensureLoaded();
      console.log(`‚úÖ Donn√©es rafra√Æchies depuis le cache`);
    } catch (error) {
      console.error('‚ùå Erreur rafra√Æchissement:', error);
      throw error;
    }
  }, [manager]);

  const getDebugInfo = useCallback(async (): Promise<any> => {
    return await manager.getDebugInfo();
  }, [manager]);

  return {
    // Actions principales
    scanPhoneContacts,
    importAllContacts,
    importSelectedContacts,
    inviteContact,
    removeContact,
    
    // Synchronisation
    syncToStrapi,
    detectBobUsers,
    
    // Nettoyage et maintenance
    deleteAllFromStrapi,
    clearAllData,
    blockSync,
    unblockSync,
    
    // √âtats
    isSyncBlocked: manager.isSyncBlockedStatus(),
    
    // Utilitaires
    refreshData,
    getDebugInfo
  };
};