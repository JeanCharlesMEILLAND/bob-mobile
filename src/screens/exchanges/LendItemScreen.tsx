// src/screens/exchanges/LendItemScreen.tsx - Interface sp√©cialis√©e pour pr√™ter un objet
import React, { useState, useEffect } from 'react';
import { 
  View, 
  Text, 
  ScrollView, 
  TextInput, 
  TouchableOpacity, 
  Alert,
  Image,
  KeyboardAvoidingView,
  Platform,
  BackHandler 
} from 'react-native';
import { useTranslation } from 'react-i18next';
import { useAuth } from '../../hooks';
import { useContactsBob } from '../../hooks/useContactsBob';
import { useSimpleNavigation } from '../../navigation/SimpleNavigation';
import { Header, Button } from '../../components/common';
import { exchangesService } from '../../services/exchanges.service';
import { authService } from '../../services/auth.service';
import { styles } from './LendItemScreen.styles';

interface ItemCondition {
  id: string;
  label: string;
  icon: string;
  description: string;
}

interface ItemCategory {
  id: string;
  label: string;
  icon: string;
}

const itemConditions: ItemCondition[] = [
  {
    id: 'excellent',
    label: 'Excellent √©tat',
    icon: '‚≠ê',
    description: 'Comme neuf, aucun d√©faut visible'
  },
  {
    id: 'tres_bon',
    label: 'Tr√®s bon √©tat',
    icon: 'üëç',
    description: 'Quelques traces d\'usage normales'
  },
  {
    id: 'bon',
    label: 'Bon √©tat',
    icon: '‚úÖ',
    description: 'Fonctionne parfaitement, quelques marques'
  },
  {
    id: 'correct',
    label: '√âtat correct',
    icon: '‚ö†Ô∏è',
    description: 'Fonctionne mais avec d√©fauts mineurs'
  }
];

const itemCategories: ItemCategory[] = [
  { id: 'bricolage', label: 'Bricolage', icon: 'üîß' },
  { id: 'jardinage', label: 'Jardinage', icon: 'üå±' },
  { id: 'cuisine', label: 'Cuisine', icon: 'üë®‚Äçüç≥' },
  { id: 'transport', label: 'Transport', icon: 'üöó' },
  { id: 'sport', label: 'Sport', icon: '‚öΩ' },
  { id: 'electronique', label: '√âlectronique', icon: 'üì±' },
  { id: 'maison', label: 'Maison', icon: 'üè†' },
  { id: 'livre', label: 'Livres', icon: 'üìö' }
];

export const LendItemScreen: React.FC = () => {
  const { t } = useTranslation();
  const { user } = useAuth();
  const navigation = useSimpleNavigation();
  
  const { repertoire, contacts: contactsBob } = useContactsBob();
  
  // √âtats du formulaire
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [category, setCategory] = useState('');
  const [condition, setCondition] = useState('');
  const [duration, setDuration] = useState('');
  const [specificConditions, setSpecificConditions] = useState('');
  const [deposit, setDeposit] = useState('');
  const [photos, setPhotos] = useState<string[]>([]);
  
  // √âtats de ciblage
  const [targetingType, setTargetingType] = useState<'all' | 'groups' | 'individual'>('all');
  const [selectedContacts, setSelectedContacts] = useState<string[]>([]);
  
  // √âtats UI
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [currentStep, setCurrentStep] = useState<'details' | 'targeting'>('details');

  // G√©rer le bouton retour Android
  useEffect(() => {
    const backAction = () => {
      if (currentStep === 'targeting') {
        setCurrentStep('details');
        return true;
      } else {
        navigation.goBack();
        return true;
      }
    };

    const backHandler = BackHandler.addEventListener('hardwareBackPress', backAction);
    return () => backHandler.remove();
  }, [currentStep, navigation]);

  // Pr√©parer les contacts r√©seau
  const allNetworkContacts = [...repertoire, ...contactsBob.map(contact => ({
    id: contact.telephone || `contact_${contact.id}`,
    nom: `${contact.prenom || ''} ${contact.nom}`.trim(),
    telephone: contact.telephone || '',
    aSurBob: true,
    userId: contact.id,
  }))];
  
  const networkContactsMap = new Map();
  allNetworkContacts.forEach(contact => {
    if (contact.telephone && !networkContactsMap.has(contact.telephone)) {
      networkContactsMap.set(contact.telephone, contact);
    }
  });
  const networkContacts = Array.from(networkContactsMap.values());
  const usersWithBob = networkContacts.filter(c => c.aSurBob);

  const handleSubmit = async () => {
    // Validation
    if (!title.trim() || !description.trim() || !category || !condition) {
      Alert.alert('Erreur', 'Veuillez remplir tous les champs obligatoires');
      return;
    }

    setIsSubmitting(true);
    try {
      const token = await authService.getValidToken();
      if (!token) {
        throw new Error('Token d\'authentification requis');
      }

      // Pr√©parer les donn√©es de l'√©change
      const exchangeData = {
        titre: title,
        description,
        type: 'pret' as const,
        categorie: category,
        etat: condition,
        dureeJours: duration ? parseInt(duration) : undefined,
        conditions: specificConditions,
        caution: deposit ? parseInt(deposit) : undefined,
        photos,
        contactsCibles: targetingType === 'individual' && selectedContacts.length > 0 
          ? selectedContacts.map(id => {
              const contact = networkContacts.find(c => c.id === id);
              return contact?.userId;
            }).filter(Boolean)
          : undefined,
        bobizRecompense: 15 // Plus de points pour pr√™ter
      };

      console.log('üì§ Cr√©ation pr√™t:', exchangeData);
      
      await exchangesService.createExchange(exchangeData, token);
      
      // Message de succ√®s
      const targetCount = targetingType === 'individual' 
        ? selectedContacts.length 
        : usersWithBob.length;
      
      Alert.alert(
        'Objet propos√© ! üéâ', 
        `Votre "${title}" est maintenant disponible pour ${targetCount} personne(s). Vous serez notifi√© des demandes d'emprunt.`,
        [{ text: 'Super !', onPress: () => navigation.goBack() }]
      );
    } catch (error) {
      console.error('‚ùå Erreur cr√©ation pr√™t:', error);
      Alert.alert('Erreur', 'Impossible de proposer l\'objet. Veuillez r√©essayer.');
    } finally {
      setIsSubmitting(false);
    }
  };

  const toggleContactSelection = (contactId: string) => {
    setSelectedContacts(prev => 
      prev.includes(contactId) 
        ? prev.filter(id => id !== contactId)
        : [...prev, contactId]
    );
  };

  const renderDetailsStep = () => (
    <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
      {/* Titre et photos */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>Informations g√©n√©rales</Text>
        
        <View style={styles.inputGroup}>
          <Text style={styles.inputLabel}>Titre de l'objet *</Text>
          <TextInput
            style={styles.input}
            placeholder="Ex: Perceuse Bosch Professional"
            value={title}
            onChangeText={setTitle}
            maxLength={100}
          />
        </View>
        
        <View style={styles.inputGroup}>
          <Text style={styles.inputLabel}>Description d√©taill√©e *</Text>
          <TextInput
            style={[styles.input, styles.textArea]}
            placeholder="D√©crivez l'objet, ses caract√©ristiques, ce qui est inclus..."
            value={description}
            onChangeText={setDescription}
            multiline
            numberOfLines={4}
            textAlignVertical="top"
            maxLength={500}
          />
          <Text style={styles.characterCount}>{description.length}/500</Text>
        </View>
        
        {/* Zone photos */}
        <View style={styles.photosSection}>
          <Text style={styles.inputLabel}>Photos (recommand√©)</Text>
          <TouchableOpacity style={styles.addPhotoButton}>
            <Text style={styles.addPhotoIcon}>üì∏</Text>
            <Text style={styles.addPhotoText}>Ajouter des photos</Text>
          </TouchableOpacity>
        </View>
      </View>
      
      {/* Cat√©gorie */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>Cat√©gorie *</Text>
        <View style={styles.categoryGrid}>
          {itemCategories.map(cat => (
            <TouchableOpacity
              key={cat.id}
              style={[styles.categoryChip, category === cat.id && styles.categoryChipSelected]}
              onPress={() => setCategory(cat.id)}
            >
              <Text style={styles.categoryIcon}>{cat.icon}</Text>
              <Text style={[styles.categoryLabel, category === cat.id && styles.categoryLabelSelected]}>
                {cat.label}
              </Text>
            </TouchableOpacity>
          ))}
        </View>
      </View>
      
      {/* √âtat de l'objet */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>√âtat de l'objet *</Text>
        <View style={styles.conditionsGrid}>
          {itemConditions.map(cond => (
            <TouchableOpacity
              key={cond.id}
              style={[styles.conditionCard, condition === cond.id && styles.conditionCardSelected]}
              onPress={() => setCondition(cond.id)}
            >
              <Text style={styles.conditionIcon}>{cond.icon}</Text>
              <Text style={[styles.conditionLabel, condition === cond.id && styles.conditionLabelSelected]}>
                {cond.label}
              </Text>
              <Text style={styles.conditionDescription}>
                {cond.description}
              </Text>
            </TouchableOpacity>
          ))}
        </View>
      </View>
      
      {/* Conditions de pr√™t */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>Conditions de pr√™t</Text>
        
        <View style={styles.inputGroup}>
          <Text style={styles.inputLabel}>Dur√©e maximale (en jours)</Text>
          <TextInput
            style={styles.input}
            placeholder="Ex: 7"
            value={duration}
            onChangeText={setDuration}
            keyboardType="numeric"
            maxLength={3}
          />
        </View>
        
        <View style={styles.inputGroup}>
          <Text style={styles.inputLabel}>Caution (optionnel)</Text>
          <TextInput
            style={styles.input}
            placeholder="Montant en euros"
            value={deposit}
            onChangeText={setDeposit}
            keyboardType="numeric"
          />
        </View>
        
        <View style={styles.inputGroup}>
          <Text style={styles.inputLabel}>Conditions sp√©ciales</Text>
          <TextInput
            style={[styles.input, styles.textArea]}
            placeholder="Pr√©cisez vos conditions (lieu de r√©cup√©ration, pr√©cautions d'usage, etc.)"
            value={specificConditions}
            onChangeText={setSpecificConditions}
            multiline
            numberOfLines={3}
            textAlignVertical="top"
            maxLength={300}
          />
        </View>
      </View>
      
      {/* Bouton continuer */}
      <View style={styles.submitSection}>
        <Button
          title="Choisir √† qui proposer"
          onPress={() => setCurrentStep('targeting')}
          disabled={!title.trim() || !description.trim() || !category || !condition}
          style={styles.submitButton}
        />
      </View>
    </ScrollView>
  );

  const renderTargetingStep = () => (
    <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>√Ä qui proposer "{title}" ?</Text>
        
        {/* Options de ciblage */}
        <View style={styles.targetingOptions}>
          <TouchableOpacity
            style={[styles.targetingOption, targetingType === 'all' && styles.targetingOptionSelected]}
            onPress={() => setTargetingType('all')}
          >
            <Text style={styles.targetingIcon}>üåç</Text>
            <View style={styles.targetingInfo}>
              <Text style={[styles.targetingTitle, targetingType === 'all' && styles.targetingTitleSelected]}>
                Tout mon r√©seau
              </Text>
              <Text style={styles.targetingDesc}>
                Visible par tous ({usersWithBob.length} personnes)
              </Text>
            </View>
            {targetingType === 'all' && <Text style={styles.targetingCheck}>‚úì</Text>}
          </TouchableOpacity>
          
          <TouchableOpacity
            style={[styles.targetingOption, targetingType === 'individual' && styles.targetingOptionSelected]}
            onPress={() => setTargetingType('individual')}
          >
            <Text style={styles.targetingIcon}>üë•</Text>
            <View style={styles.targetingInfo}>
              <Text style={[styles.targetingTitle, targetingType === 'individual' && styles.targetingTitleSelected]}>
                Personnes sp√©cifiques
              </Text>
              <Text style={styles.targetingDesc}>
                Choisir individuellement
              </Text>
            </View>
            {targetingType === 'individual' && <Text style={styles.targetingCheck}>‚úì</Text>}
          </TouchableOpacity>
        </View>
        
        {/* S√©lection individuelle */}
        {targetingType === 'individual' && (
          <View style={styles.contactsSection}>
            <Text style={styles.contactsTitle}>S√©lectionner des contacts</Text>
            <View style={styles.contactsList}>
              {networkContacts.map(contact => {
                const isSelected = selectedContacts.includes(contact.id);
                return (
                  <TouchableOpacity
                    key={contact.id}
                    style={[styles.contactItem, isSelected && styles.contactItemSelected]}
                    onPress={() => toggleContactSelection(contact.id)}
                  >
                    <View style={styles.contactAvatar}>
                      <Text style={styles.contactAvatarText}>
                        {contact.nom.split(' ').map(n => n[0]).join('')}
                      </Text>
                    </View>
                    <View style={styles.contactInfo}>
                      <Text style={styles.contactName}>{contact.nom}</Text>
                      <Text style={styles.contactDetail}>
                        {contact.aSurBob ? 'ü§ñ Sur Bob' : 'üì§ Sera invit√©'}
                      </Text>
                    </View>
                    {isSelected && <Text style={styles.contactCheck}>‚úì</Text>}
                  </TouchableOpacity>
                );
              })}
            </View>
          </View>
        )}
      </View>
      
      {/* Bouton publier */}
      <View style={styles.submitSection}>
        <Button
          title="Publier l'objet üì§"
          onPress={handleSubmit}
          loading={isSubmitting}
          style={styles.submitButton}
        />
        <Text style={styles.submitNote}>
          Vous recevrez une notification √† chaque demande d'emprunt
        </Text>
      </View>
    </ScrollView>
  );

  return (
    <KeyboardAvoidingView 
      style={styles.container}
      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
    >
      <Header 
        title={currentStep === 'details' ? 'Pr√™ter un objet' : 'Ciblage'}
        showBackButton={true}
        onBackPress={currentStep === 'details' ? () => navigation.goBack() : () => setCurrentStep('details')}
      />
      
      {currentStep === 'details' && renderDetailsStep()}
      {currentStep === 'targeting' && renderTargetingStep()}
    </KeyboardAvoidingView>
  );
};