// src/screens/contacts/ContactsSelectionScreen.tsx - √âcran d√©di√© √† la s√©lection de contacts
import React from 'react';
import { View, StyleSheet } from 'react-native';
import { ContactsSelectionInterface } from '../../components/contacts/ContactsSelectionInterface';
import { useContacts } from '../../hooks/contacts/useContacts';
import { useSimpleNavigation } from '../../navigation/SimpleNavigation';
import { useNotifications } from '../../components/common/SmartNotifications';
import { SmartNotifications } from '../../components/common/SmartNotifications';

export const ContactsSelectionScreen: React.FC = () => {
  const navigation = useSimpleNavigation();
  const notifications = useNotifications();
  const {
    contactsBruts,
    repertoire,
    contacts,
    invitations,
    isLoading,
    importerContactsSelectionnes,
    importerContactsEtSync
  } = useContacts();
  
  // State local pour contr√¥ler le loader du bouton d'import
  const [isImporting, setIsImporting] = React.useState(false);

  // Debug: v√©rifier les donn√©es re√ßues
  React.useEffect(() => {
    console.log('üîç ContactsSelectionScreen - Donn√©es re√ßues du hook:', {
      contactsBrutsLength: contactsBruts?.length || 0,
      repertoireLength: repertoire?.length || 0,
      isLoading,
      contactsBrutsExample: contactsBruts?.slice(0, 3),
      hookInstance: 'nouveau hook dans ContactsSelectionScreen'
    });
    
    if (contactsBruts?.length === 0) {
      console.log('‚ö†Ô∏è PROBL√àME: ContactsSelectionScreen a des contactsBruts vides!');
      console.log('üîç Cela sugg√®re que le hook se r√©initialise √† chaque navigation');
    }
  }, [contactsBruts, repertoire, isLoading]);

  const handleClose = () => {
    console.log('üîô Retour sans import - ContactsSelectionScreen');
    console.log('üìä √âtat lors du retour:', {
      repertoireLength: repertoire?.length || 0,
      contactsBrutsLength: contactsBruts?.length || 0
    });
    navigation.goBack();
  };

  const handleImportSelected = async (selectedIds: string[]) => {
    console.log('üéØüéØüéØ BOUTON IMPORT PRESSED - handleImportSelected appel√© avec:', selectedIds.length, 'contacts');
    
    // Debug pour voir le r√©pertoire
    console.log('üîç DEBUG SCREEN - R√©pertoire pass√© au composant:', {
      length: repertoire?.length || 0,
      premier: repertoire?.[0]?.nom || 'AUCUN',
      exemple: repertoire?.slice(0, 3).map(c => ({ nom: c.nom, telephone: c.telephone })) || []
    });
    try {
      console.log(`üì• Import de ${selectedIds.length} contacts s√©lectionn√©s`);
      console.log('üìä Donn√©es avant import:', {
        repertoireLength: repertoire?.length || 0,
        contactsBrutsLength: contactsBruts?.length || 0
      });
      
      // üîß Lancer l'import en arri√®re-plan et afficher imm√©diatement la notification de succ√®s
      importerContactsEtSync?.(selectedIds);
      
      // üéâ Afficher notification de succ√®s dans le m√™me style que la suppression de contacts
      notifications.success(
        'Contacts ajout√©s', 
        `${selectedIds.length} contact${selectedIds.length > 1 ? 's' : ''} ajout√©${selectedIds.length > 1 ? 's' : ''} √† votre r√©pertoire Bob.`,
        { category: 'contacts_import' }
      );
      
      console.log('‚úÖ Notification affich√©e, retour √† l\'√©cran pr√©c√©dent');
      navigation.goBack();
    } catch (error) {
      console.error('‚ùå Erreur import contacts:', error);
    }
  };

  // Debug au rendu du screen
  console.log('üîç ContactsSelectionScreen RENDER - Donn√©es:', {
    contactsBruts: contactsBruts?.length || 0,
    repertoire: repertoire?.length || 0,
    premierRepertoire: repertoire?.[0]?.nom || 'AUCUN'
  });

  return (
    <View style={styles.container}>
      <ContactsSelectionInterface
        contactsBruts={contactsBruts || []}
        repertoire={repertoire || []}
        isLoading={isImporting}
        onClose={handleClose}
        onImportSelected={handleImportSelected}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#ffffff',
  },
});