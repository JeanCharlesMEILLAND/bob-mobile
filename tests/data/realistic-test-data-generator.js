/**
 * üéØ G√âN√âRATEUR DE DONN√âES R√âALISTES POUR BOB
 * 
 * G√©n√®re des donn√©es de test r√©alistes pour populer la base :
 * - Utilisateurs avec profils complets
 * - Contacts diversifi√©s
 * - √âchanges vari√©s (pr√™ts, emprunts, services)
 * - √âv√©nements avec besoins
 * - Relations et interactions
 */

const axios = require('axios');
const faker = require('faker');
faker.locale = 'fr';

const CONFIG = {
  API_BASE_URL: 'http://localhost:1337/api',
  ADMIN_USER: {
    email: 'admin@bob.com',
    password: 'AdminBob123!',
    username: 'admin_bob'
  }
};

class RealisticDataGenerator {
  constructor() {
    this.adminToken = null;
    this.createdUsers = [];
    this.createdContacts = [];
    this.createdExchanges = [];
    this.createdEvents = [];
  }

  log(emoji, message, data = null) {
    console.log(`${emoji} ${message}`);
    if (data) console.log('  ', JSON.stringify(data, null, 2));
  }

  async setupAdmin() {
    try {
      // Connexion admin ou cr√©ation
      try {
        const response = await axios.post(`${CONFIG.API_BASE_URL}/auth/local`, {
          identifier: CONFIG.ADMIN_USER.email,
          password: CONFIG.ADMIN_USER.password
        });
        this.adminToken = response.data.jwt;
        this.log('üîê', 'Connexion admin r√©ussie');
      } catch (error) {
        // Cr√©er admin si pas trouv√©
        const registerResponse = await axios.post(`${CONFIG.API_BASE_URL}/auth/local/register`, {
          ...CONFIG.ADMIN_USER,
          nom: 'Admin',
          prenom: 'Bob',
          telephone: '+33600000000'
        });
        this.adminToken = registerResponse.data.jwt;
        this.log('üîê', 'Admin cr√©√© et connect√©');
      }
    } catch (error) {
      console.error('‚ùå Erreur setup admin:', error.message);
      throw error;
    }
  }

  // üë• G√©n√©ration utilisateurs r√©alistes
  async generateRealisticUsers(count = 10) {
    this.log('üë•', `G√©n√©ration de ${count} utilisateurs r√©alistes...`);
    
    const userProfiles = [
      { type: 'famille', niveau: 'Ami fid√®le', bobizRange: [50, 200] },
      { type: 'voisin', niveau: 'D√©butant', bobizRange: [0, 50] },
      { type: 'ami', niveau: 'Super Bob', bobizRange: [200, 500] },
      { type: 'bricoleur', niveau: 'L√©gende', bobizRange: [500, 1000] }
    ];

    const users = [];
    
    for (let i = 0; i < count; i++) {
      const profile = userProfiles[i % userProfiles.length];
      const prenom = faker.name.firstName();
      const nom = faker.name.lastName();
      
      const userData = {
        email: `${prenom.toLowerCase()}.${nom.toLowerCase()}@bob-test.com`,
        password: 'TestPassword123!',
        username: `${prenom.toLowerCase()}_${nom.toLowerCase()}`,
        nom: nom,
        prenom: prenom,
        telephone: `+336${faker.datatype.number({ min: 10000000, max: 99999999 })}`,
        bobizPoints: faker.datatype.number(profile.bobizRange[0], profile.bobizRange[1]),
        niveau: profile.niveau,
        estEnLigne: faker.datatype.boolean()
      };

      try {
        const response = await axios.post(`${CONFIG.API_BASE_URL}/auth/local/register`, userData);
        users.push(response.data.user);
        this.log('‚úÖ', `Utilisateur cr√©√©: ${userData.prenom} ${userData.nom}`);
      } catch (error) {
        this.log('‚ö†Ô∏è', `√âchec utilisateur ${userData.prenom}: ${error.response?.data?.error?.message || error.message}`);
      }
    }

    this.createdUsers = users;
    return users;
  }

  // üìû G√©n√©ration contacts r√©alistes  
  async generateRealisticContacts(userId, token, count = 20) {
    this.log('üìû', `G√©n√©ration de ${count} contacts pour utilisateur ${userId}...`);

    const contactTypes = [
      { type: 'famille', relations: ['maman', 'papa', 'fr√®re', 's≈ìur', 'oncle', 'tante', 'cousin', 'cousine'] },
      { type: 'amis', relations: ['ami proche', 'copain', 'copine', 'ancien coll√®gue', 'ami d\'enfance'] },
      { type: 'voisins', relations: ['voisin', 'voisine', 'syndic', 'gardien'] },
      { type: 'professionnels', relations: ['m√©decin', 'plombier', '√©lectricien', 'garagiste', 'coiffeur'] }
    ];

    const contacts = [];

    for (let i = 0; i < count; i++) {
      const typeGroup = contactTypes[i % contactTypes.length];
      const relation = faker.random.arrayElement(typeGroup.relations);
      
      const contactData = {
        nom: faker.name.lastName(),
        prenom: faker.name.firstName(),
        telephone: `+336${faker.datatype.number({ min: 10000000, max: 99999999 })}`,
        email: faker.datatype.boolean() ? faker.internet.email() : null,
        source: 'generation_realiste',
        metadata: {
          relation: relation,
          type: typeGroup.type,
          dateAjout: faker.date.recent(30).toISOString()
        }
      };

      contacts.push(contactData);
    }

    // Import bulk
    try {
      const response = await axios.post(`${CONFIG.API_BASE_URL}/contacts/bulk-create-single`, {
        data: contacts
      }, {
        headers: { Authorization: `Bearer ${token}` }
      });
      
      this.log('‚úÖ', `${response.data.meta.count} contacts cr√©√©s en ${response.data.meta.duration}`);
      return contacts;
    } catch (error) {
      this.log('‚ùå', '√âchec g√©n√©ration contacts', error.response?.data);
      return [];
    }
  }

  // üîÑ G√©n√©ration √©changes r√©alistes
  async generateRealisticExchanges(userId, token, count = 15) {
    this.log('üîÑ', `G√©n√©ration de ${count} √©changes r√©alistes...`);

    const realExchanges = [
      // PR√äTS
      {
        type: 'pret',
        titre: 'Perceuse Bosch GSB 13 RE',
        description: 'Perceuse √† percussion, parfaite pour percer b√©ton et brique. Coffret avec forets inclus. Utilis√©e pour mes travaux personnels.',
        dureeJours: 2,
        conditions: 'Manipulation avec pr√©caution, retour propre',
        bobizGagnes: 12
      },
      {
        type: 'pret', 
        titre: 'Tondeuse thermique Honda',
        description: 'Tondeuse robuste, coupe 46cm, bac de ramassage. Parfait pour jardins moyens. Essence √† pr√©voir par l\'emprunteur.',
        dureeJours: 1,
        conditions: 'Vidanger apr√®s utilisation si usage intensif',
        bobizGagnes: 15
      },
      {
        type: 'pret',
        titre: 'Plancha gaz Weber',
        description: 'Plancha 3 feux, id√©ale pour barbecues entre amis. Avec spatules et racloir. Se transporte facilement.',
        dureeJours: 1,
        conditions: 'Nettoyage apr√®s usage, gaz non inclus',
        bobizGagnes: 18
      },

      // EMPRUNTS
      {
        type: 'emprunt',
        titre: 'Recherche √©chelle 3m',
        description: 'J\'ai besoin d\'emprunter une √©chelle pour nettoyer mes goutti√®res ce weekend. Je peux me d√©placer pour r√©cup√©rer.',
        dureeJours: 1,
        conditions: 'Usage prudent, restitution impeccable',
        bobizGagnes: 8
      },
      {
        type: 'emprunt',
        titre: 'Scie circulaire pour projet DIY',
        description: 'Je refais ma terrasse et j\'aurais besoin d\'une scie circulaire pour d√©couper des planches. Projet de 2-3 jours.',
        dureeJours: 3,
        conditions: 'Exp√©rience bricolage, assurance personnelle',
        bobizGagnes: 20
      },

      // SERVICES OFFERTS
      {
        type: 'service_offert',
        titre: 'Cours de guitare d√©butant',
        description: 'Je donne des cours de guitare depuis 5 ans. M√©thode adapt√©e aux d√©butants, tous √¢ges. Guitare fournie si besoin.',
        bobizGagnes: 25,
        conditions: 'S√©ances 1h, √† mon domicile ou chez vous'
      },
      {
        type: 'service_offert',
        titre: 'Garde d\'enfants occasionnelle',
        description: 'Garde vos enfants (2-12 ans) pour sorties, rendez-vous m√©dicaux. Exp√©rience avec mes neveux, r√©f√©rences disponibles.',
        bobizGagnes: 30,
        conditions: 'Disponible soirs et weekends, tarif modulable'
      },
      {
        type: 'service_offert',
        titre: 'Aide informatique seniors',
        description: 'J\'aide les seniors avec leurs smartphones, tablettes, ordinateurs. Installation apps, cours utilisation, d√©pannage.',
        bobizGagnes: 20,
        conditions: 'Patience garantie, explications simples'
      },

      // SERVICES DEMAND√âS  
      {
        type: 'service_demande',
        titre: 'Aide d√©m√©nagement samedi 14h',
        description: 'D√©m√©nagement F2 vers F3, √©tage sans ascenseur. Camion r√©serv√©, besoin de 2-3 personnes costauds !',
        bobizGagnes: 35,
        conditions: 'D√©but 14h, fini vers 18h, pizza offerte'
      },
      {
        type: 'service_demande',
        titre: 'Cours de cuisine italienne',
        description: 'Je voudrais apprendre √† faire de vraies p√¢tes fra√Æches et sauces italiennes. Contre service ou √©change.',
        bobizGagnes: 28,
        conditions: 'Ingr√©dients √† mes frais, flexible sur horaires'
      },
      {
        type: 'service_demande',
        titre: 'R√©paration v√©lo vintage',
        description: 'Mon v√©lo des ann√©es 80 a besoin d\'un r√©glage des freins et changement de cha√Æne. Pi√®ces fournies.',
        bobizGagnes: 22,
        conditions: 'Pi√®ces achet√©es, juste besoin du savoir-faire'
      }
    ];

    const createdExchanges = [];
    const statuts = ['actif', 'actif', 'actif', 'en_cours', 'termine']; // Majorit√© actifs

    for (let i = 0; i < Math.min(count, realExchanges.length); i++) {
      const exchangeData = {
        ...realExchanges[i],
        statut: faker.random.arrayElement(statuts),
        dateCreation: faker.date.recent(30).toISOString(),
        metadata: {
          localisation: faker.address.city(),
          urgence: faker.random.arrayElement(['basse', 'normale', 'haute']),
          vues: faker.datatype.number({ min: 0, max: 50 }),
          demandes: faker.datatype.number({ min: 0, max: 5 })
        }
      };

      try {
        const response = await axios.post(`${CONFIG.API_BASE_URL}/echanges`, {
          data: exchangeData
        }, {
          headers: { Authorization: `Bearer ${token}` }
        });

        createdExchanges.push(response.data.data);
        this.log('‚úÖ', `${exchangeData.type.toUpperCase()}: ${exchangeData.titre}`);
      } catch (error) {
        this.log('‚ö†Ô∏è', `√âchec √©change: ${error.response?.data?.error?.message || error.message}`);
      }

      // Pause pour √©viter surcharge
      await new Promise(resolve => setTimeout(resolve, 200));
    }

    this.createdExchanges = createdExchanges;
    return createdExchanges;
  }

  // üìÖ G√©n√©ration √©v√©nements r√©alistes
  async generateRealisticEvents(userId, token, count = 5) {
    this.log('üìÖ', `G√©n√©ration de ${count} √©v√©nements r√©alistes...`);

    const realEvents = [
      {
        titre: 'Atelier r√©paration v√©los',
        description: 'Apprenons ensemble √† r√©parer nos v√©los ! Venez avec votre v√©lo en panne, on partage outils et savoir-faire.',
        dateDebut: faker.date.soon(7),
        maxParticipants: 8,
        bobizRecompense: 25,
        adresse: '15 rue des Artisans, Paris 11√®me',
        besoins: [
          { id: 'outils_1', type: 'objet', titre: 'Bo√Æte √† outils compl√®te', description: 'Cl√©s, tournevis, d√©rive-cha√Æne', quantite: 2 },
          { id: 'service_1', type: 'service_individuel', titre: 'M√©canicien exp√©riment√©', description: 'Personne qui s\'y conna√Æt en m√©canique v√©lo', quantite: 1 }
        ]
      },
      {
        titre: 'Jardinage collectif samedi',
        description: 'Remettons en √©tat le jardin partag√© ! Plantation, d√©sherbage, am√©nagement. Mat√©riel et plants fournis.',
        dateDebut: faker.date.soon(14),
        maxParticipants: 12,
        bobizRecompense: 30,
        adresse: 'Jardin partag√©, square des Lilas',
        besoins: [
          { id: 'outils_2', type: 'objet', titre: 'Outils jardinage', description: 'B√™ches, r√¢teaux, s√©cateurs', quantite: 5 },
          { id: 'service_2', type: 'service_collectif', titre: '√âquipe binage', description: 'Groupe pour pr√©parer la terre', quantite: 4 }
        ]
      },
      {
        titre: 'Cuisine du monde dimanche',
        description: 'Chacun apporte une sp√©cialit√© de son pays/r√©gion. D√©gustation conviviale et √©change de recettes !',
        dateDebut: faker.date.soon(10),
        maxParticipants: 15,
        bobizRecompense: 20,
        adresse: 'Salle des f√™tes, 8 avenue de la R√©publique',
        besoins: [
          { id: 'materiel_1', type: 'objet', titre: 'Mat√©riel service', description: 'Assiettes, couverts, nappes', quantite: 3 },
          { id: 'service_3', type: 'service_individuel', titre: 'Photographe amateur', description: 'Quelqu\'un pour immortaliser la soir√©e', quantite: 1 }
        ]
      }
    ];

    const createdEvents = [];

    for (let i = 0; i < Math.min(count, realEvents.length); i++) {
      const eventBase = realEvents[i];
      const eventData = {
        ...eventBase,
        dateDebut: new Date(eventBase.dateDebut).toISOString(),
        dateFin: new Date(new Date(eventBase.dateDebut).getTime() + 4 * 60 * 60 * 1000).toISOString(), // +4h
        statut: 'planifie',
        dateCreation: new Date().toISOString(),
        metadata: {
          besoins: eventBase.besoins,
          ciblage: { type: 'all' },
          type: 'bob_collectif'
        }
      };

      try {
        const response = await axios.post(`${CONFIG.API_BASE_URL}/evenements`, {
          data: eventData
        }, {
          headers: { Authorization: `Bearer ${token}` }
        });

        createdEvents.push(response.data.data);
        this.log('‚úÖ', `√âv√©nement: ${eventData.titre}`);
      } catch (error) {
        this.log('‚ö†Ô∏è', `√âchec √©v√©nement: ${error.response?.data?.error?.message || error.message}`);
      }
    }

    this.createdEvents = createdEvents;
    return createdEvents;
  }

  // üöÄ G√©n√©ration compl√®te
  async generateCompleteDataset() {
    console.log('\nüéØ ================================');
    console.log('üé® G√âN√âRATION DONN√âES R√âALISTES BOB');
    console.log('üéØ ================================\n');

    try {
      await this.setupAdmin();
      
      // G√©n√©ration utilisateurs
      const users = await this.generateRealisticUsers(8);
      
      // Pour chaque utilisateur, g√©n√©rer ses donn√©es
      for (let i = 0; i < Math.min(3, users.length); i++) { // Limiter √† 3 pour le test
        const user = users[i];
        
        // Login en tant qu'utilisateur
        const loginResponse = await axios.post(`${CONFIG.API_BASE_URL}/auth/local`, {
          identifier: user.email,
          password: 'TestPassword123!'
        });
        const userToken = loginResponse.data.jwt;
        
        this.log('üë§', `G√©n√©ration donn√©es pour ${user.prenom} ${user.nom}`);
        
        // G√©n√©rer contacts
        await this.generateRealisticContacts(user.id, userToken, 15);
        
        // G√©n√©rer √©changes
        await this.generateRealisticExchanges(user.id, userToken, 8);
        
        // G√©n√©rer √©v√©nements (moins fr√©quents)
        if (i < 2) {
          await this.generateRealisticEvents(user.id, userToken, 2);
        }
      }

      console.log('\nüéâ ================================');
      console.log('‚úÖ G√âN√âRATION TERMIN√âE !');
      console.log(`üë• Utilisateurs: ${users.length}`);
      console.log(`üîÑ √âchanges: ${this.createdExchanges.length}`);
      console.log(`üìÖ √âv√©nements: ${this.createdEvents.length}`);
      console.log('üéâ ================================\n');

    } catch (error) {
      console.error('\n‚ùå Erreur g√©n√©ration:', error.message);
      if (error.response?.data) {
        console.error('D√©tails:', JSON.stringify(error.response.data, null, 2));
      }
    }
  }
}

// Installation faker si pas pr√©sent
try {
  require('faker');
} catch (error) {
  console.log('üì¶ Installation de faker...');
  const { execSync } = require('child_process');
  execSync('npm install faker@5.5.3', { stdio: 'inherit' });
  console.log('‚úÖ Faker install√©');
}

if (require.main === module) {
  const generator = new RealisticDataGenerator();
  generator.generateCompleteDataset().catch(console.error);
}

module.exports = RealisticDataGenerator;